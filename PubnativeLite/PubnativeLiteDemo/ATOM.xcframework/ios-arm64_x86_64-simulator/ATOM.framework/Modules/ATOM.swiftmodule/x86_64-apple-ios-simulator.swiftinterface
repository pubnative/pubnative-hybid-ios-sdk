// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ATOM
@_exported import ATOM
import CoreGraphics
import CoreML
import CoreMotion
import CoreTelephony
import Dispatch
import Foundation
import Network
import SQLite3
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@_hasMissingDesignatedInitializers final public class DBQueries {
  @objc deinit
}
public typealias SQLiteConnection = Swift.OpaquePointer
@_hasMissingDesignatedInitializers final public class Database {
  final public let sqliteConnection: SQLiteConnection
  public static var logError: Database.LogErrorFunction? {
    get
    set
  }
  final public let configuration: Configuration
  final public var lastInsertedRowID: Swift.Int64 {
    get
  }
  final public var changesCount: Swift.Int {
    get
  }
  final public var totalChangesCount: Swift.Int {
    get
  }
  final public var isInsideTransaction: Swift.Bool {
    get
  }
  final public var lastErrorCode: ResultCode {
    get
  }
  final public var lastErrorMessage: Swift.String? {
    get
  }
  @objc deinit
  final public func add(function: DatabaseFunction)
  final public func remove(function: DatabaseFunction)
  final public func add(collation: DatabaseCollation)
  final public func remove(collation: DatabaseCollation)
  public static let suspendNotification: Foundation.Notification.Name
  public static let resumeNotification: Foundation.Notification.Name
  final public func inTransaction(_ kind: Database.TransactionKind? = nil, _ block: () throws -> Database.TransactionCompletion) throws
  final public func inSavepoint(_ block: () throws -> Database.TransactionCompletion) throws
  final public func beginTransaction(_ kind: Database.TransactionKind? = nil) throws
  final public func rollback() throws
  final public func commit() throws
}
extension Database {
  public typealias BusyCallback = (_ numberOfTries: Swift.Int) -> Swift.Bool
  public enum BusyMode {
    case immediateError
    case timeout(Foundation.TimeInterval)
    case callback(Database.BusyCallback)
  }
  public enum CheckpointMode : Swift.Int32 {
    case passive
    case full
    case restart
    case truncate
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public struct CollationName : Swift.RawRepresentable, Swift.Hashable {
    public let rawValue: Swift.String
    public init(rawValue: Swift.String)
    public init(_ rawValue: Swift.String)
    public static let binary: Database.CollationName
    public static let nocase: Database.CollationName
    public static let rtrim: Database.CollationName
    public typealias RawValue = Swift.String
  }
  public struct ColumnType : Swift.RawRepresentable, Swift.Hashable {
    public let rawValue: Swift.String
    public init(rawValue: Swift.String)
    public init(_ rawValue: Swift.String)
    public static let text: Database.ColumnType
    public static let integer: Database.ColumnType
    public static let double: Database.ColumnType
    public static let numeric: Database.ColumnType
    public static let boolean: Database.ColumnType
    public static let blob: Database.ColumnType
    public static let date: Database.ColumnType
    public static let datetime: Database.ColumnType
    public typealias RawValue = Swift.String
  }
  public enum ConflictResolution : Swift.String {
    case rollback
    case abort
    case fail
    case ignore
    case replace
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ForeignKeyAction : Swift.String {
    case cascade
    case restrict
    case setNull
    case setDefault
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias LogErrorFunction = (_ resultCode: ResultCode, _ message: Swift.String) -> Swift.Void
  public enum TransactionCompletion {
    case commit
    case rollback
    public static func == (a: Database.TransactionCompletion, b: Database.TransactionCompletion) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum TransactionKind : Swift.String {
    case deferred
    case immediate
    case exclusive
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension CoreFoundation.CGFloat : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> CoreFoundation.CGFloat?
}
public struct SwipeTick {
}
public protocol DatabaseWriter : DatabaseReader {
  func write<T>(_ updates: (Database) throws -> T) throws -> T
  func writeWithoutTransaction<T>(_ updates: (Database) throws -> T) rethrows -> T
  func barrierWriteWithoutTransaction<T>(_ updates: (Database) throws -> T) rethrows -> T
  func asyncWrite<T>(_ updates: @escaping (Database) throws -> T, completion: @escaping (Database, Swift.Result<T, any Swift.Error>) -> Swift.Void)
  func asyncWriteWithoutTransaction(_ updates: @escaping (Database) -> Swift.Void)
  func unsafeReentrantWrite<T>(_ updates: (Database) throws -> T) rethrows -> T
  func concurrentRead<T>(_ block: @escaping (Database) throws -> T) -> DatabaseFuture<T>
  func spawnConcurrentRead(_ block: @escaping (Swift.Result<Database, any Swift.Error>) -> Swift.Void)
}
extension DatabaseWriter {
  public func write<T>(_ updates: (Database) throws -> T) throws -> T
  public func asyncWrite<T>(_ updates: @escaping (Database) throws -> T, completion: @escaping (Database, Swift.Result<T, any Swift.Error>) -> Swift.Void)
  public func add(transactionObserver: any TransactionObserver, extent: Database.TransactionObservationExtent = .observerLifetime)
  public func remove(transactionObserver: any TransactionObserver)
  public func erase() throws
  public func vacuum() throws
  public func add<Reducer>(observation: ValueObservation<Reducer>, onError: @escaping (any Swift.Error) -> Swift.Void, onChange: @escaping (Reducer.Value) -> Swift.Void) -> any TransactionObserver where Reducer : ValueReducer
}
@_hasMissingDesignatedInitializers public class DatabaseFuture<Value> {
  public func wait() throws -> Value
  @objc deinit
}
final public class AnyDatabaseWriter : DatabaseWriter {
  public init(_ base: any DatabaseWriter)
  final public var configuration: Configuration {
    get
  }
  final public func interrupt()
  final public func read<T>(_ block: (Database) throws -> T) throws -> T
  final public func asyncRead(_ block: @escaping (Swift.Result<Database, any Swift.Error>) -> Swift.Void)
  final public func unsafeRead<T>(_ block: (Database) throws -> T) throws -> T
  final public func unsafeReentrantRead<T>(_ block: (Database) throws -> T) throws -> T
  final public func concurrentRead<T>(_ block: @escaping (Database) throws -> T) -> DatabaseFuture<T>
  final public func spawnConcurrentRead(_ block: @escaping (Swift.Result<Database, any Swift.Error>) -> Swift.Void)
  final public func write<T>(_ updates: (Database) throws -> T) throws -> T
  final public func writeWithoutTransaction<T>(_ updates: (Database) throws -> T) rethrows -> T
  final public func barrierWriteWithoutTransaction<T>(_ updates: (Database) throws -> T) rethrows -> T
  final public func asyncWrite<T>(_ updates: @escaping (Database) throws -> T, completion: @escaping (Database, Swift.Result<T, any Swift.Error>) -> Swift.Void)
  final public func asyncWriteWithoutTransaction(_ updates: @escaping (Database) -> Swift.Void)
  final public func unsafeReentrantWrite<T>(_ updates: (Database) throws -> T) rethrows -> T
  final public func add(function: DatabaseFunction)
  final public func remove(function: DatabaseFunction)
  final public func add(collation: DatabaseCollation)
  final public func remove(collation: DatabaseCollation)
  @objc deinit
}
@available(iOS 8.0, *)
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) public func swizzle()
}
extension UIKit.UIWindow {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func swizzledSendEvent(_ event: UIKit.UIEvent)
}
public struct PinchTick {
}
public struct FTS4 : VirtualTableModule {
  public init()
  public let moduleName: Swift.String
  public func makeTableDefinition() -> FTS4TableDefinition
  public func moduleArguments(for definition: FTS4TableDefinition, in db: Database) -> [Swift.String]
  public func database(_ db: Database, didCreate tableName: Swift.String, using definition: FTS4TableDefinition) throws
  public typealias TableDefinition = FTS4TableDefinition
}
@_hasMissingDesignatedInitializers final public class FTS4TableDefinition {
  final public var tokenizer: FTS3TokenizerDescriptor?
  final public var content: Swift.String? {
    get
    set
  }
  final public var compress: Swift.String?
  final public var uncompress: Swift.String?
  final public var matchinfo: Swift.String?
  final public var prefixes: Swift.Set<Swift.Int>?
  @discardableResult
  final public func column(_ name: Swift.String) -> FTS4ColumnDefinition
  final public func synchronize(withTable tableName: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FTS4ColumnDefinition {
  @available(macOS 10.10, *)
  @discardableResult
  final public func notIndexed() -> Self
  @discardableResult
  final public func asLanguageId() -> Self
  @objc deinit
}
extension Database {
  final public func dropFTS4SynchronizationTriggers(forTable tableName: Swift.String) throws
}
extension SQLExpression {
  @available(*, deprecated, message: "Use SQLLiteral initializer instead")
  public var sqlLiteral: SQLLiteral {
    get
  }
}
public struct SQLUnaryOperator : Swift.Hashable {
  public let sql: Swift.String
  public let needsRightSpace: Swift.Bool
  public init(_ sql: Swift.String, needsRightSpace: Swift.Bool)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SQLUnaryOperator, b: SQLUnaryOperator) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct SQLExpressionUnary : SQLExpression {
  public let op: SQLUnaryOperator
  public let expression: any SQLExpression
  public init(_ op: SQLUnaryOperator, _ value: any SQLExpressible)
  public func expressionSQL(_ context: inout SQLGenerationContext, wrappedInParenthesis: Swift.Bool) -> Swift.String
  public func qualifiedExpression(with alias: TableAlias) -> any SQLExpression
}
public struct SQLBinaryOperator : Swift.Hashable {
  public let sql: Swift.String
  public let negatedSQL: Swift.String?
  public init(_ sql: Swift.String, negated: Swift.String? = nil)
  public var negated: SQLBinaryOperator? {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SQLBinaryOperator, b: SQLBinaryOperator) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct SQLExpressionBinary : SQLExpression {
  public let lhs: any SQLExpression
  public let op: SQLBinaryOperator
  public let rhs: any SQLExpression
  public init(_ op: SQLBinaryOperator, _ lhs: any SQLExpressible, _ rhs: any SQLExpressible)
  public func expressionSQL(_ context: inout SQLGenerationContext, wrappedInParenthesis: Swift.Bool) -> Swift.String
  public var negated: any SQLExpression {
    get
  }
  public func qualifiedExpression(with alias: TableAlias) -> any SQLExpression
}
public struct SQLAssociativeBinaryOperator : Swift.Hashable {
  public let sql: Swift.String
  public let neutralValue: DatabaseValue
  public let strictlyAssociative: Swift.Bool
  public init(sql: Swift.String, neutralValue: DatabaseValue, strictlyAssociative: Swift.Bool)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SQLAssociativeBinaryOperator, b: SQLAssociativeBinaryOperator) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Sequence where Self.Element == any SQLExpression {
  public func joined(operator: SQLAssociativeBinaryOperator) -> any SQLExpression
}
public struct SQLFunctionName : Swift.Hashable {
  public var sql: Swift.String
  public init(_ sql: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SQLFunctionName, b: SQLFunctionName) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct SQLExpressionFunction : SQLExpression {
  public let functionName: SQLFunctionName
  public let arguments: [any SQLExpression]
  public init(_ functionName: SQLFunctionName, arguments: [any SQLExpression])
  public init(_ functionName: SQLFunctionName, arguments: any SQLExpressible...)
  public func expressionSQL(_ context: inout SQLGenerationContext, wrappedInParenthesis: Swift.Bool) -> Swift.String
  public func qualifiedExpression(with alias: TableAlias) -> any SQLExpression
}
extension Swift.Array {
  @inlinable public init<C>(_ cursor: C) throws where Element == C.Element, C : Cursor {
        self.init()
        while let element = try cursor.next() {
            append(element)
        }
    }
}
extension Swift.Sequence {
  public func flatMap<SegmentOfResult>(_ transform: @escaping (Self.Iterator.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<AnyCursor<Self.Iterator.Element>, SegmentOfResult>> where SegmentOfResult : Cursor
}
extension Swift.Set {
  public init<C>(_ cursor: C) throws where Element == C.Element, C : Cursor
}
public protocol Cursor : AnyObject {
  associatedtype Element
  func next() throws -> Self.Element?
}
extension Cursor {
  public func isEmpty() throws -> Swift.Bool
  public func contains(where predicate: (Self.Element) throws -> Swift.Bool) throws -> Swift.Bool
  public func enumerated() -> EnumeratedCursor<Self>
  public func filter(_ isIncluded: @escaping (Self.Element) throws -> Swift.Bool) -> FilterCursor<Self>
  public func first(where predicate: (Self.Element) throws -> Swift.Bool) throws -> Self.Element?
  public func compactMap<ElementOfResult>(_ transform: @escaping (Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>
  public func drop(while predicate: @escaping (Self.Element) throws -> Swift.Bool) -> DropWhileCursor<Self>
  public func dropFirst(_ n: Swift.Int) -> DropFirstCursor<Self>
  public func dropFirst() -> DropFirstCursor<Self>
  public func dropLast(_ n: Swift.Int) throws -> [Self.Element]
  public func dropLast() throws -> [Self.Element]
  public func flatMap<SegmentOfResult>(_ transform: @escaping (Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, AnyCursor<SegmentOfResult.Element>>> where SegmentOfResult : Swift.Sequence
  public func flatMap<SegmentOfResult>(_ transform: @escaping (Self.Element) throws -> SegmentOfResult) -> FlattenCursor<MapCursor<Self, SegmentOfResult>> where SegmentOfResult : Cursor
  public func forEach(_ body: (Self.Element) throws -> Swift.Void) throws
  public func map<T>(_ transform: @escaping (Self.Element) throws -> T) -> MapCursor<Self, T>
  public func max(by areInIncreasingOrder: (Self.Element, Self.Element) throws -> Swift.Bool) throws -> Self.Element?
  public func min(by areInIncreasingOrder: (Self.Element, Self.Element) throws -> Swift.Bool) throws -> Self.Element?
  public func prefix(_ maxLength: Swift.Int) -> PrefixCursor<Self>
  public func prefix(while predicate: @escaping (Self.Element) throws -> Swift.Bool) -> PrefixWhileCursor<Self>
  public func reduce<Result>(_ initialResult: Result, _ nextPartialResult: (Result, Self.Element) throws -> Result) throws -> Result
  public func reduce<Result>(into initialResult: Result, _ updateAccumulatingResult: (inout Result, Self.Element) throws -> Swift.Void) throws -> Result
  public func suffix(_ maxLength: Swift.Int) throws -> [Self.Element]
}
extension Cursor where Self.Element : Swift.Equatable {
  public func contains(_ element: Self.Element) throws -> Swift.Bool
}
extension Cursor where Self.Element : Swift.Comparable {
  public func max() throws -> Self.Element?
  public func min() throws -> Self.Element?
}
extension Cursor where Self.Element : Cursor {
  public func joined() -> FlattenCursor<Self>
}
extension Cursor where Self.Element : Swift.Sequence {
  public func joined() -> FlattenCursor<MapCursor<Self, AnyCursor<Self.Element.Element>>>
}
extension Cursor where Self.Element : Swift.StringProtocol {
  public func joined(separator: Swift.String = "") throws -> Swift.String
}
final public class AnyCursor<Element> : Cursor {
  public init<C>(_ base: C) where Element == C.Element, C : Cursor
  convenience public init<I>(iterator: I) where Element == I.Element, I : Swift.IteratorProtocol
  convenience public init<S>(_ s: S) where Element == S.Element, S : Swift.Sequence
  public init(_ body: @escaping () throws -> Element?)
  final public func next() throws -> Element?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DropFirstCursor<Base> : Cursor where Base : Cursor {
  final public func next() throws -> Base.Element?
  public typealias Element = Base.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DropWhileCursor<Base> : Cursor where Base : Cursor {
  final public func next() throws -> Base.Element?
  public typealias Element = Base.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class EnumeratedCursor<Base> : Cursor where Base : Cursor {
  final public func next() throws -> (Swift.Int, Base.Element)?
  public typealias Element = (Swift.Int, Base.Element)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FilterCursor<Base> : Cursor where Base : Cursor {
  final public func next() throws -> Base.Element?
  public typealias Element = Base.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class FlattenCursor<Base> : Cursor where Base : Cursor, Base.Element : Cursor {
  final public func next() throws -> Base.Element.Element?
  public typealias Element = Base.Element.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MapCursor<Base, Element> : Cursor where Base : Cursor {
  final public func next() throws -> Element?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PrefixCursor<Base> : Cursor where Base : Cursor {
  final public func next() throws -> Base.Element?
  public typealias Element = Base.Element
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PrefixWhileCursor<Base> : Cursor where Base : Cursor {
  final public func next() throws -> Base.Element?
  public typealias Element = Base.Element
  @objc deinit
}
public struct PreparedRequest {
  public var statement: SelectStatement
  public var adapter: (any RowAdapter)?
  public init(statement: SelectStatement, adapter: (any RowAdapter)? = nil)
}
public protocol FetchRequest : DatabaseRegionConvertible {
  associatedtype RowDecoder
  func prepare(_ db: Database, forSingleResult singleResult: Swift.Bool) throws -> (SelectStatement, (any RowAdapter)?)
  func makePreparedRequest(_ db: Database, forSingleResult singleResult: Swift.Bool) throws -> PreparedRequest
  func fetchCount(_ db: Database) throws -> Swift.Int
}
extension FetchRequest {
  public func adapted(_ adapter: @escaping (Database) throws -> any RowAdapter) -> AdaptedFetchRequest<Self>
  public func fetchCount(_ db: Database) throws -> Swift.Int
  public func databaseRegion(_ db: Database) throws -> DatabaseRegion
  public func makePreparedRequest(_ db: Database, forSingleResult singleResult: Swift.Bool) throws -> PreparedRequest
  public func prepare(_ db: Database, forSingleResult singleResult: Swift.Bool) throws -> (SelectStatement, (any RowAdapter)?)
}
public struct AdaptedFetchRequest<Base> : FetchRequest where Base : FetchRequest {
  public typealias RowDecoder = Base.RowDecoder
  public func makePreparedRequest(_ db: Database, forSingleResult singleResult: Swift.Bool) throws -> PreparedRequest
  public func fetchCount(_ db: Database) throws -> Swift.Int
  public func databaseRegion(_ db: Database) throws -> DatabaseRegion
}
public struct AnyFetchRequest<T> : FetchRequest {
  public typealias RowDecoder = T
  public init<Request>(_ request: Request) where Request : FetchRequest
  @available(*, deprecated, message: "Define your own FetchRequest type instead.")
  public init(_ prepare: @escaping (Database, _ singleResult: Swift.Bool) throws -> (SelectStatement, (any RowAdapter)?))
  public func makePreparedRequest(_ db: Database, forSingleResult singleResult: Swift.Bool) throws -> PreparedRequest
  public func fetchCount(_ db: Database) throws -> Swift.Int
  public func databaseRegion(_ db: Database) throws -> DatabaseRegion
}
extension Database {
  @available(macOS 10.10, *)
  final public func create(table name: Swift.String, temporary: Swift.Bool = false, ifNotExists: Swift.Bool = false, withoutRowID: Swift.Bool, body: (TableDefinition) -> Swift.Void) throws
  final public func create(table name: Swift.String, temporary: Swift.Bool = false, ifNotExists: Swift.Bool = false, body: (TableDefinition) -> Swift.Void) throws
  final public func rename(table name: Swift.String, to newName: Swift.String) throws
  final public func alter(table name: Swift.String, body: (TableAlteration) -> Swift.Void) throws
  final public func drop(table name: Swift.String) throws
  final public func create(index name: Swift.String, on table: Swift.String, columns: [Swift.String], unique: Swift.Bool = false, ifNotExists: Swift.Bool = false) throws
  @available(macOS 10.10, *)
  final public func create(index name: Swift.String, on table: Swift.String, columns: [Swift.String], unique: Swift.Bool = false, ifNotExists: Swift.Bool = false, condition: any SQLExpressible) throws
  final public func drop(index name: Swift.String) throws
  final public func reindex(collation: Database.CollationName) throws
  final public func reindex(collation: DatabaseCollation) throws
}
@_hasMissingDesignatedInitializers final public class TableDefinition {
  @discardableResult
  final public func autoIncrementedPrimaryKey(_ name: Swift.String, onConflict conflictResolution: Database.ConflictResolution? = nil) -> ColumnDefinition
  @discardableResult
  final public func column(_ name: Swift.String, _ type: Database.ColumnType? = nil) -> ColumnDefinition
  final public func primaryKey(_ columns: [Swift.String], onConflict conflictResolution: Database.ConflictResolution? = nil)
  final public func uniqueKey(_ columns: [Swift.String], onConflict conflictResolution: Database.ConflictResolution? = nil)
  final public func foreignKey(_ columns: [Swift.String], references table: Swift.String, columns destinationColumns: [Swift.String]? = nil, onDelete deleteAction: Database.ForeignKeyAction? = nil, onUpdate updateAction: Database.ForeignKeyAction? = nil, deferred: Swift.Bool = false)
  final public func check(_ condition: any SQLExpressible)
  final public func check(sql: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TableAlteration {
  @discardableResult
  final public func add(column name: Swift.String, _ type: Database.ColumnType? = nil) -> ColumnDefinition
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  final public func rename(column name: Swift.String, to newName: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ColumnDefinition {
  @discardableResult
  final public func primaryKey(onConflict conflictResolution: Database.ConflictResolution? = nil, autoincrement: Swift.Bool = false) -> Self
  @discardableResult
  final public func notNull(onConflict conflictResolution: Database.ConflictResolution? = nil) -> Self
  @discardableResult
  final public func unique(onConflict conflictResolution: Database.ConflictResolution? = nil) -> Self
  @discardableResult
  final public func indexed() -> Self
  @discardableResult
  final public func check(_ condition: (Column) -> any SQLExpressible) -> Self
  @discardableResult
  final public func check(sql: Swift.String) -> Self
  @discardableResult
  final public func defaults(to value: any DatabaseValueConvertible) -> Self
  @discardableResult
  final public func defaults(sql: Swift.String) -> Self
  @discardableResult
  final public func collate(_ collation: Database.CollationName) -> Self
  @discardableResult
  final public func collate(_ collation: DatabaseCollation) -> Self
  @discardableResult
  final public func references(_ table: Swift.String, column: Swift.String? = nil, onDelete deleteAction: Database.ForeignKeyAction? = nil, onUpdate updateAction: Database.ForeignKeyAction? = nil, deferred: Swift.Bool = false) -> Self
  @objc deinit
}
extension Database {
  final public func makeSelectStatement(sql: Swift.String) throws -> SelectStatement
  final public func cachedSelectStatement(sql: Swift.String) throws -> SelectStatement
  final public func makeUpdateStatement(sql: Swift.String) throws -> UpdateStatement
  final public func cachedUpdateStatement(sql: Swift.String) throws -> UpdateStatement
  final public func execute(sql: Swift.String, arguments: StatementArguments = StatementArguments()) throws
  final public func execute(literal sqlLiteral: SQLLiteral) throws
}
public protocol DatabaseValueConvertible : SQLExpressible {
  var databaseValue: DatabaseValue { get }
  static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Self?
}
extension DatabaseValueConvertible {
  public var sqlExpression: any SQLExpression {
    get
  }
}
@_hasMissingDesignatedInitializers final public class DatabaseValueCursor<Value> : Cursor where Value : DatabaseValueConvertible {
  @usableFromInline
  final internal let _statement: SelectStatement
  @usableFromInline
  final internal let _sqliteStatement: SQLiteStatement
  @usableFromInline
  final internal let _columnIndex: Swift.Int32
  @usableFromInline
  final internal var _done: Swift.Bool
  @objc deinit
  @inlinable final public func next() throws -> Value? {
        if _done {
            // make sure this instance never yields a value again, even if the
            // statement is reset by another cursor.
            return nil
        }
        switch sqlite3_step(_sqliteStatement) {
        case SQLITE_DONE:
            _done = true
            return nil
        case SQLITE_ROW:
            return Value.decode(from: _sqliteStatement, atUncheckedIndex: _columnIndex)
        case let code:
            try _statement.didFail(withResultCode: code)
        }
    }
  public typealias Element = Value
}
@_hasMissingDesignatedInitializers final public class NullableDatabaseValueCursor<Value> : Cursor where Value : DatabaseValueConvertible {
  @usableFromInline
  final internal let _statement: SelectStatement
  @usableFromInline
  final internal let _sqliteStatement: SQLiteStatement
  @usableFromInline
  final internal let _columnIndex: Swift.Int32
  @usableFromInline
  final internal var _done: Swift.Bool
  @objc deinit
  @inlinable final public func next() throws -> Value?? {
        if _done {
            // make sure this instance never yields a value again, even if the
            // statement is reset by another cursor.
            return nil
        }
        switch sqlite3_step(_sqliteStatement) {
        case SQLITE_DONE:
            _done = true
            return nil
        case SQLITE_ROW:
            return Value.decodeIfPresent(from: _sqliteStatement, atUncheckedIndex: _columnIndex)
        case let code:
            try _statement.didFail(withResultCode: code)
        }
    }
  public typealias Element = Value?
}
extension DatabaseValueConvertible {
  public static func fetchCursor(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> DatabaseValueCursor<Self>
  public static func fetchAll(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> [Self]
  public static func fetchOne(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> Self?
}
extension DatabaseValueConvertible {
  public static func fetchCursor(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> DatabaseValueCursor<Self>
  public static func fetchAll(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> [Self]
  public static func fetchOne(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> Self?
}
extension DatabaseValueConvertible {
  public static func fetchCursor<R>(_ db: Database, _ request: R) throws -> DatabaseValueCursor<Self> where R : FetchRequest
  public static func fetchAll<R>(_ db: Database, _ request: R) throws -> [Self] where R : FetchRequest
  public static func fetchOne<R>(_ db: Database, _ request: R) throws -> Self? where R : FetchRequest
}
extension FetchRequest where Self.RowDecoder : DatabaseValueConvertible {
  public func fetchCursor(_ db: Database) throws -> DatabaseValueCursor<Self.RowDecoder>
  public func fetchAll(_ db: Database) throws -> [Self.RowDecoder]
  public func fetchOne(_ db: Database) throws -> Self.RowDecoder?
}
extension Swift.Optional where Wrapped : DatabaseValueConvertible {
  public static func fetchCursor(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> NullableDatabaseValueCursor<Wrapped>
  public static func fetchAll(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> [Wrapped?]
}
extension Swift.Optional where Wrapped : DatabaseValueConvertible {
  public static func fetchCursor(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> NullableDatabaseValueCursor<Wrapped>
  public static func fetchAll(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> [Wrapped?]
}
extension Swift.Optional where Wrapped : DatabaseValueConvertible {
  public static func fetchCursor<R>(_ db: Database, _ request: R) throws -> NullableDatabaseValueCursor<Wrapped> where R : FetchRequest
  public static func fetchAll<R>(_ db: Database, _ request: R) throws -> [Wrapped?] where R : FetchRequest
}
extension FetchRequest where Self.RowDecoder : _OptionalProtocol, Self.RowDecoder._Wrapped : DatabaseValueConvertible {
  public func fetchCursor(_ db: Database) throws -> NullableDatabaseValueCursor<Self.RowDecoder._Wrapped>
  public func fetchAll(_ db: Database) throws -> [Self.RowDecoder._Wrapped?]
}
public enum ATOMCellularConnectionType {
  case noConnection
  case unknown
  case g2
  case g3
  case g4
  case g5
  public static func == (a: ATOMCellularConnectionType, b: ATOMCellularConnectionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ATOMSignalManager {
  public static let shared: ATOMSignalManager
  public var isDeviceCharging: Swift.Bool {
    get
  }
  public var batteryLevel: Swift.Int {
    get
  }
  public var batterySaver: Swift.Bool {
    get
  }
  public var getCurrentNetworkConnectionType: ATOMCellularConnectionType {
    get
  }
  public var getScreenBrightness: Swift.Int {
    get
  }
  @objc deinit
}
public typealias SQLiteStatement = Swift.OpaquePointer
@_hasMissingDesignatedInitializers public class Statement {
  final public let sqliteStatement: SQLiteStatement
  public var sql: Swift.String {
    get
  }
  @objc deinit
  public var arguments: StatementArguments {
    get
    set
  }
  public func validateArguments(_ arguments: StatementArguments) throws
  @available(*, deprecated, renamed: "validateArguments(_:)")
  public func validate(arguments: StatementArguments) throws
  public func setUncheckedArguments(_ arguments: StatementArguments)
  @available(*, deprecated, renamed: "setUncheckedArguments(_:)")
  public func unsafeSetArguments(_ arguments: StatementArguments)
  public func setArguments(_ arguments: StatementArguments) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class SelectStatement : Statement {
  final public var databaseRegion: DatabaseRegion {
    get
  }
  final public var columnCount: Swift.Int {
    get
  }
  final public var columnNames: [Swift.String] {
    get
    set
  }
  final public func index(ofColumn name: Swift.String) -> Swift.Int?
  @usableFromInline
  final internal func didFail(withResultCode resultCode: Swift.Int32) throws -> Swift.Never
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class UpdateStatement : Statement {
  final public func execute(arguments: StatementArguments? = nil) throws
  @objc deinit
}
public struct StatementArguments : Swift.CustomStringConvertible, Swift.Equatable, Swift.ExpressibleByArrayLiteral, Swift.ExpressibleByDictionaryLiteral {
  public var isEmpty: Swift.Bool {
    get
  }
  public init()
  public init<Sequence>(_ sequence: Sequence) where Sequence : Swift.Sequence, Sequence.Element == (any DatabaseValueConvertible)?
  public init<Sequence>(_ sequence: Sequence) where Sequence : Swift.Sequence, Sequence.Element : DatabaseValueConvertible
  public init?(_ array: [Any])
  public init(_ dictionary: [Swift.String : (any DatabaseValueConvertible)?])
  public init<Sequence>(_ sequence: Sequence) where Sequence : Swift.Sequence, Sequence.Element == (Swift.String, (any DatabaseValueConvertible)?)
  public init?(_ dictionary: [Swift.AnyHashable : Any])
  public mutating func append(contentsOf arguments: StatementArguments) -> [Swift.String : DatabaseValue]
  public static func + (lhs: StatementArguments, rhs: StatementArguments) -> StatementArguments
  public static func &+ (lhs: StatementArguments, rhs: StatementArguments) -> StatementArguments
  public static func += (lhs: inout StatementArguments, rhs: StatementArguments)
  public static func == (a: StatementArguments, b: StatementArguments) -> Swift.Bool
  public typealias ArrayLiteralElement = (any DatabaseValueConvertible)?
  public typealias Key = Swift.String
  public typealias Value = (any DatabaseValueConvertible)?
}
extension StatementArguments {
  public init(arrayLiteral elements: (any DatabaseValueConvertible)?...)
}
extension StatementArguments {
  public init(dictionaryLiteral elements: (Swift.String, (any DatabaseValueConvertible)?)...)
}
extension StatementArguments {
  public var description: Swift.String {
    get
  }
}
public protocol AtomDelegate : AnyObject {
  func cohortsUpdated()
}
public protocol AtomGesturesDelegate : AnyObject {
  func gestureTracked(_ gesture: ATOMGesturesList)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Atom : ObjectiveC.NSObject {
  weak public static var delegate: (any AtomDelegate)?
  weak public static var gestureDelegate: (any AtomGesturesDelegate)?
  @objc public static func start(withApiKey apiKey: Swift.String, isTest: Swift.Bool) throws
  public static func getCurrentNetworkConnection() -> ATOMReachability.Connection
  @objc public static func start(withApiKey apiKey: Swift.String, isTest: Swift.Bool, withCallback callback: ((Swift.Bool) -> ())?) throws
  @objc public static func setAtomLoggerLevels(_ logLevels: [Swift.String])
  @objc public static func start(isTest: Swift.Bool) throws
  @objc public static func start(isTest: Swift.Bool, withCallback callback: ((Swift.Bool) -> ())?) throws
  @objc public static func stop(withCallback callback: ((Swift.Bool) -> ())?)
  @objc(getCohorts) public static func cohorts() -> [Cohort]
  public static func sendStartupData(completion: @escaping (Swift.Bool) -> Swift.Void)
  public static func updateCalculatedCohorts(onStartup isStartup: Swift.Bool = false, eventWasFired eventFired: Swift.Bool = false)
  @objc public static func vgParameterBase64String() -> Swift.String?
  @objc(impressionFiredWithAdParameters:) public static func impressionFired(withAdParameters parameters: ATOMAdParameters)
  @objc public static func fire(eventWithName name: Swift.String, eventWithValue value: Any? = nil, withDelegate delegate: (any ATOMEventMatchDelegate)? = nil)
  @objc deinit
}
extension Atom {
  public static func getGestures(withQuery q: Swift.String? = nil) throws -> [GestureObject]
  public static func getSwipeGestures(withQuery q: Swift.String? = nil) throws -> [SwipeDataPoint]
  public static func getPinchGestures(withQuery q: Swift.String? = nil) throws -> [PinchDataPoint]
  public static func getSwipeTicks(withQuery q: Swift.String? = nil) throws -> [SwipeTick]
  public static func getPinchTicks(withQuery q: Swift.String? = nil) throws -> [PinchTick]
}
extension Atom {
  public static func deleteAllGestures() throws
  public static func deletePrevious1000GesturesIfNeeded() throws
  public static func deleteAllSwipeGestures() throws
  public static func deleteAllPinchGestures() throws
  public static func deleteAllSwipeTicks() throws
  public static func deleteAllPinchTicks() throws
}
extension Atom : ATOMGesturesTrackerDelegate {
  public func gestureTracked(_ gesture: ATOMGesturesList)
}
public struct SQLAssociation {
}
public struct SQLGenerationContext {
}
@_hasMissingDesignatedInitializers public class TableAlias : Swift.Hashable {
  public init(name: Swift.String? = nil)
  public subscript(selectable: any SQLSelectable) -> any SQLSelectable {
    get
  }
  public subscript(expression: any SQLExpression) -> any SQLExpression {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: TableAlias, rhs: TableAlias) -> Swift.Bool
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public struct DatabaseRegion : Swift.CustomStringConvertible, Swift.Equatable {
  public var isEmpty: Swift.Bool {
    get
  }
  public static let fullDatabase: DatabaseRegion
  public init()
  public init(table: Swift.String)
  public func union(_ other: DatabaseRegion) -> DatabaseRegion
  public mutating func formUnion(_ other: DatabaseRegion)
}
extension DatabaseRegion {
  public func isModified(byEventsOfKind eventKind: DatabaseEventKind) -> Swift.Bool
  public func isModified(by event: DatabaseEvent) -> Swift.Bool
}
extension DatabaseRegion {
  public static func == (lhs: DatabaseRegion, rhs: DatabaseRegion) -> Swift.Bool
}
extension DatabaseRegion {
  public var description: Swift.String {
    get
  }
}
public protocol DatabaseRegionConvertible {
  func databaseRegion(_ db: Database) throws -> DatabaseRegion
}
extension DatabaseRegion : DatabaseRegionConvertible {
  public func databaseRegion(_ db: Database) throws -> DatabaseRegion
}
public struct AnyDatabaseRegionConvertible : DatabaseRegionConvertible {
  public init(_ region: @escaping (Database) throws -> DatabaseRegion)
  public init(_ region: any DatabaseRegionConvertible)
  public func databaseRegion(_ db: Database) throws -> DatabaseRegion
}
@_hasMissingDesignatedInitializers public class DebugConfiguration {
  final public let id: Swift.Int
  final public let threshold: Swift.Int?
  public var name: Swift.String!
  final public let description: Swift.String!
  public var model: Swift.String!
  public var timezone: Swift.String!
  public var locale: Swift.String!
  @objc deinit
}
public enum ValueScheduling {
  case mainQueue
  case async(onQueue: Dispatch.DispatchQueue, startImmediately: Swift.Bool)
  case unsafe(startImmediately: Swift.Bool)
}
public struct ValueObservation<Reducer> {
  public var requiresWriteAccess: Swift.Bool
  public var scheduling: ValueScheduling
}
extension ValueObservation where Reducer : ValueReducer {
  public func start(in reader: any DatabaseReader, onChange: @escaping (Reducer.Value) -> Swift.Void) throws -> any TransactionObserver
  public func start(in reader: any DatabaseReader, onError: @escaping (any Swift.Error) -> Swift.Void, onChange: @escaping (Reducer.Value) -> Swift.Void) -> any TransactionObserver
}
extension ValueObservation where Reducer : ValueReducer {
  public static func tracking(_ regions: any DatabaseRegionConvertible..., reducer: @escaping (Database) throws -> Reducer) -> ValueObservation<Reducer>
  public static func tracking(_ regions: [any DatabaseRegionConvertible], reducer: @escaping (Database) throws -> Reducer) -> ValueObservation<Reducer>
}
extension ValueObservation where Reducer == () {
  public static func tracking<Value>(value: @escaping (Database) throws -> Value) -> ValueObservation<ValueReducers.Fetch<Value>>
  public static func tracking<Value>(_ regions: any DatabaseRegionConvertible..., fetch: @escaping (Database) throws -> Value) -> ValueObservation<ValueReducers.Fetch<Value>>
  public static func tracking<Value>(_ regions: [any DatabaseRegionConvertible], fetch: @escaping (Database) throws -> Value) -> ValueObservation<ValueReducers.Fetch<Value>>
}
extension TableRecord {
  public static func all() -> QueryInterfaceRequest<Self>
  public static func none() -> QueryInterfaceRequest<Self>
  public static func select(_ selection: any SQLSelectable...) -> QueryInterfaceRequest<Self>
  public static func select(_ selection: [any SQLSelectable]) -> QueryInterfaceRequest<Self>
  public static func select(sql: Swift.String, arguments: StatementArguments = StatementArguments()) -> QueryInterfaceRequest<Self>
  public static func select(literal sqlLiteral: SQLLiteral) -> QueryInterfaceRequest<Self>
  public static func select<RowDecoder>(_ selection: [any SQLSelectable], as type: RowDecoder.Type = RowDecoder.self) -> QueryInterfaceRequest<RowDecoder>
  public static func select<RowDecoder>(_ selection: any SQLSelectable..., as type: RowDecoder.Type = RowDecoder.self) -> QueryInterfaceRequest<RowDecoder>
  public static func select<RowDecoder>(sql: Swift.String, arguments: StatementArguments = StatementArguments(), as type: RowDecoder.Type = RowDecoder.self) -> QueryInterfaceRequest<RowDecoder>
  public static func select<RowDecoder>(literal sqlLiteral: SQLLiteral, as type: RowDecoder.Type = RowDecoder.self) -> QueryInterfaceRequest<RowDecoder>
  public static func annotated(with selection: [any SQLSelectable]) -> QueryInterfaceRequest<Self>
  public static func annotated(with selection: any SQLSelectable...) -> QueryInterfaceRequest<Self>
  public static func filter(_ predicate: any SQLExpressible) -> QueryInterfaceRequest<Self>
  public static func filter<PrimaryKeyType>(key: PrimaryKeyType?) -> QueryInterfaceRequest<Self> where PrimaryKeyType : DatabaseValueConvertible
  public static func filter<Sequence>(keys: Sequence) -> QueryInterfaceRequest<Self> where Sequence : Swift.Sequence, Sequence.Element : DatabaseValueConvertible
  public static func filter(key: [Swift.String : (any DatabaseValueConvertible)?]?) -> QueryInterfaceRequest<Self>
  public static func filter(keys: [[Swift.String : (any DatabaseValueConvertible)?]]) -> QueryInterfaceRequest<Self>
  public static func filter(sql: Swift.String, arguments: StatementArguments = StatementArguments()) -> QueryInterfaceRequest<Self>
  public static func filter(literal sqlLiteral: SQLLiteral) -> QueryInterfaceRequest<Self>
  public static func order(_ orderings: any SQLOrderingTerm...) -> QueryInterfaceRequest<Self>
  public static func order(_ orderings: [any SQLOrderingTerm]) -> QueryInterfaceRequest<Self>
  public static func orderByPrimaryKey() -> QueryInterfaceRequest<Self>
  public static func order(sql: Swift.String, arguments: StatementArguments = StatementArguments()) -> QueryInterfaceRequest<Self>
  public static func order(literal sqlLiteral: SQLLiteral) -> QueryInterfaceRequest<Self>
  public static func limit(_ limit: Swift.Int, offset: Swift.Int? = nil) -> QueryInterfaceRequest<Self>
  public static func aliased(_ alias: TableAlias) -> QueryInterfaceRequest<Self>
}
public protocol StatementColumnConvertible {
  init(sqliteStatement: SQLiteStatement, index: Swift.Int32)
}
@_hasMissingDesignatedInitializers final public class FastDatabaseValueCursor<Value> : Cursor where Value : DatabaseValueConvertible, Value : StatementColumnConvertible {
  @usableFromInline
  final internal let _statement: SelectStatement
  @usableFromInline
  final internal let _columnIndex: Swift.Int32
  @usableFromInline
  final internal let _sqliteStatement: SQLiteStatement
  @usableFromInline
  final internal var _done: Swift.Bool
  @objc deinit
  @inlinable final public func next() throws -> Value? {
        if _done {
            // make sure this instance never yields a value again, even if the
            // statement is reset by another cursor.
            return nil
        }
        switch sqlite3_step(_sqliteStatement) {
        case SQLITE_DONE:
            _done = true
            return nil
        case SQLITE_ROW:
            return Value.fastDecode(from: _sqliteStatement, atUncheckedIndex: _columnIndex)
        case let code:
            try _statement.didFail(withResultCode: code)
        }
    }
  public typealias Element = Value
}
@_hasMissingDesignatedInitializers final public class FastNullableDatabaseValueCursor<Value> : Cursor where Value : DatabaseValueConvertible, Value : StatementColumnConvertible {
  @usableFromInline
  final internal let _statement: SelectStatement
  @usableFromInline
  final internal let _columnIndex: Swift.Int32
  @usableFromInline
  final internal let _sqliteStatement: SQLiteStatement
  @usableFromInline
  final internal var _done: Swift.Bool
  @objc deinit
  @inlinable final public func next() throws -> Value?? {
        if _done {
            // make sure this instance never yields a value again, even if the
            // statement is reset by another cursor.
            return nil
        }
        switch sqlite3_step(_sqliteStatement) {
        case SQLITE_DONE:
            _done = true
            return nil
        case SQLITE_ROW:
            return Value.fastDecodeIfPresent(from: _sqliteStatement, atUncheckedIndex: _columnIndex)
        case let code:
            try _statement.didFail(withResultCode: code)
        }
    }
  public typealias Element = Value?
}
extension DatabaseValueConvertible where Self : StatementColumnConvertible {
  public static func fetchCursor(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> FastDatabaseValueCursor<Self>
  public static func fetchAll(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> [Self]
  public static func fetchOne(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> Self?
}
extension DatabaseValueConvertible where Self : StatementColumnConvertible {
  public static func fetchCursor(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> FastDatabaseValueCursor<Self>
  public static func fetchAll(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> [Self]
  public static func fetchOne(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> Self?
}
extension DatabaseValueConvertible where Self : StatementColumnConvertible {
  public static func fetchCursor<R>(_ db: Database, _ request: R) throws -> FastDatabaseValueCursor<Self> where R : FetchRequest
  public static func fetchAll<R>(_ db: Database, _ request: R) throws -> [Self] where R : FetchRequest
  public static func fetchOne<R>(_ db: Database, _ request: R) throws -> Self? where R : FetchRequest
}
extension FetchRequest where Self.RowDecoder : DatabaseValueConvertible, Self.RowDecoder : StatementColumnConvertible {
  public func fetchCursor(_ db: Database) throws -> FastDatabaseValueCursor<Self.RowDecoder>
  public func fetchAll(_ db: Database) throws -> [Self.RowDecoder]
  public func fetchOne(_ db: Database) throws -> Self.RowDecoder?
}
extension Swift.Optional where Wrapped : DatabaseValueConvertible, Wrapped : StatementColumnConvertible {
  public static func fetchCursor(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> FastNullableDatabaseValueCursor<Wrapped>
  public static func fetchAll(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> [Wrapped?]
}
extension Swift.Optional where Wrapped : DatabaseValueConvertible, Wrapped : StatementColumnConvertible {
  public static func fetchCursor(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> FastNullableDatabaseValueCursor<Wrapped>
  public static func fetchAll(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> [Wrapped?]
}
extension Swift.Optional where Wrapped : DatabaseValueConvertible, Wrapped : StatementColumnConvertible {
  public static func fetchCursor<R>(_ db: Database, _ request: R) throws -> FastNullableDatabaseValueCursor<Wrapped> where R : FetchRequest
  public static func fetchAll<R>(_ db: Database, _ request: R) throws -> [Wrapped?] where R : FetchRequest
}
extension FetchRequest where Self.RowDecoder : _OptionalProtocol, Self.RowDecoder._Wrapped : DatabaseValueConvertible, Self.RowDecoder._Wrapped : StatementColumnConvertible {
  public func fetchCursor(_ db: Database) throws -> FastNullableDatabaseValueCursor<Self.RowDecoder._Wrapped>
  public func fetchAll(_ db: Database) throws -> [Self.RowDecoder._Wrapped?]
}
final public class DatabasePool : DatabaseWriter {
  final public var path: Swift.String {
    get
  }
  final public var configuration: Configuration {
    get
  }
  public init(path: Swift.String, configuration: Configuration = Configuration()) throws
  @objc deinit
}
extension DatabasePool {
  final public func checkpoint(_ kind: Database.CheckpointMode = .passive) throws
}
extension DatabasePool {
  final public func releaseMemory()
  @available(*, deprecated, message: "Memory management is now enabled by default. This deprecated method does nothing.")
  final public func setupMemoryManagement(in application: UIKit.UIApplication)
}
extension DatabasePool : DatabaseReader {
  final public func interrupt()
  final public func read<T>(_ block: (Database) throws -> T) throws -> T
  final public func asyncRead(_ block: @escaping (Swift.Result<Database, any Swift.Error>) -> Swift.Void)
  final public func unsafeRead<T>(_ block: (Database) throws -> T) throws -> T
  final public func unsafeReentrantRead<T>(_ block: (Database) throws -> T) throws -> T
  final public func concurrentRead<T>(_ block: @escaping (Database) throws -> T) -> DatabaseFuture<T>
  final public func spawnConcurrentRead(_ block: @escaping (Swift.Result<Database, any Swift.Error>) -> Swift.Void)
  final public func asyncConcurrentRead(_ block: @escaping (Swift.Result<Database, any Swift.Error>) -> Swift.Void)
  final public func invalidateReadOnlyConnections()
  final public func writeWithoutTransaction<T>(_ updates: (Database) throws -> T) rethrows -> T
  final public func barrierWriteWithoutTransaction<T>(_ updates: (Database) throws -> T) rethrows -> T
  final public func writeInTransaction(_ kind: Database.TransactionKind? = nil, _ updates: (Database) throws -> Database.TransactionCompletion) throws
  final public func unsafeReentrantWrite<T>(_ updates: (Database) throws -> T) rethrows -> T
  final public func asyncWriteWithoutTransaction(_ updates: @escaping (Database) -> Swift.Void)
  final public func add(function: DatabaseFunction)
  final public func remove(function: DatabaseFunction)
  final public func add(collation: DatabaseCollation)
  final public func remove(collation: DatabaseCollation)
}
extension DatabasePool {
  final public func makeSnapshot() throws -> DatabaseSnapshot
}
extension FetchableRecord where Self : TableRecord {
  public static func fetchCursor(_ db: Database) throws -> RecordCursor<Self>
  public static func fetchAll(_ db: Database) throws -> [Self]
  public static func fetchOne(_ db: Database) throws -> Self?
}
extension FetchableRecord where Self : TableRecord {
  public static func fetchCursor<Sequence>(_ db: Database, keys: Sequence) throws -> RecordCursor<Self> where Sequence : Swift.Sequence, Sequence.Element : DatabaseValueConvertible
  public static func fetchAll<Sequence>(_ db: Database, keys: Sequence) throws -> [Self] where Sequence : Swift.Sequence, Sequence.Element : DatabaseValueConvertible
  public static func fetchOne<PrimaryKeyType>(_ db: Database, key: PrimaryKeyType?) throws -> Self? where PrimaryKeyType : DatabaseValueConvertible
}
extension FetchableRecord where Self : TableRecord {
  public static func fetchCursor(_ db: Database, keys: [[Swift.String : (any DatabaseValueConvertible)?]]) throws -> RecordCursor<Self>
  public static func fetchAll(_ db: Database, keys: [[Swift.String : (any DatabaseValueConvertible)?]]) throws -> [Self]
  public static func fetchOne(_ db: Database, key: [Swift.String : (any DatabaseValueConvertible)?]?) throws -> Self?
}
public protocol SelectionRequest {
  func select(_ selection: [any SQLSelectable]) -> Self
  func annotated(with selection: [any SQLSelectable]) -> Self
}
extension SelectionRequest {
  public func select(_ selection: any SQLSelectable...) -> Self
  public func select(sql: Swift.String, arguments: StatementArguments = StatementArguments()) -> Self
  public func select(literal sqlLiteral: SQLLiteral) -> Self
  public func annotated(with selection: any SQLSelectable...) -> Self
}
public protocol FilteredRequest {
  func filter(_ predicate: @escaping (Database) throws -> any SQLExpressible) -> Self
  func expectingSingleResult() -> Self
}
extension FilteredRequest {
  public func expectingSingleResult() -> Self
  public func filter(_ predicate: any SQLExpressible) -> Self
  public func filter(sql: Swift.String, arguments: StatementArguments = StatementArguments()) -> Self
  public func filter(literal sqlLiteral: SQLLiteral) -> Self
  public func none() -> Self
}
public protocol TableRequest {
  var databaseTableName: Swift.String { get }
  func aliased(_ alias: TableAlias) -> Self
}
extension TableRequest where Self : FilteredRequest {
  public func filter<PrimaryKeyType>(key: PrimaryKeyType?) -> Self where PrimaryKeyType : DatabaseValueConvertible
  public func filter<Sequence>(keys: Sequence) -> Self where Sequence : Swift.Sequence, Sequence.Element : DatabaseValueConvertible
  public func filter(key: [Swift.String : (any DatabaseValueConvertible)?]?) -> Self
  public func filter(keys: [[Swift.String : (any DatabaseValueConvertible)?]]) -> Self
}
extension TableRequest where Self : OrderedRequest {
  public func orderByPrimaryKey() -> Self
}
extension TableRequest where Self : AggregatingRequest {
  public func groupByPrimaryKey() -> Self
}
public protocol AggregatingRequest {
  func group(_ expressions: @escaping (Database) throws -> [any SQLExpressible]) -> Self
  func having(_ predicate: any SQLExpressible) -> Self
}
extension AggregatingRequest {
  public func group(_ expressions: [any SQLExpressible]) -> Self
  public func group(_ expressions: any SQLExpressible...) -> Self
  public func group(sql: Swift.String, arguments: StatementArguments = StatementArguments()) -> Self
  public func group(literal sqlLiteral: SQLLiteral) -> Self
  public func having(sql: Swift.String, arguments: StatementArguments = StatementArguments()) -> Self
  public func having(literal sqlLiteral: SQLLiteral) -> Self
}
public protocol OrderedRequest {
  func order(_ orderings: @escaping (Database) throws -> [any SQLOrderingTerm]) -> Self
  func reversed() -> Self
  func unordered() -> Self
}
extension OrderedRequest {
  public func order(_ orderings: any SQLOrderingTerm...) -> Self
  public func order(_ orderings: [any SQLOrderingTerm]) -> Self
  public func order(sql: Swift.String, arguments: StatementArguments = StatementArguments()) -> Self
  public func order(literal sqlLiteral: SQLLiteral) -> Self
}
public protocol _JoinableRequest {
  func _including(all association: SQLAssociation) -> Self
  func _including(optional association: SQLAssociation) -> Self
  func _including(required association: SQLAssociation) -> Self
  func _joining(optional association: SQLAssociation) -> Self
  func _joining(required association: SQLAssociation) -> Self
}
public protocol JoinableRequest : _JoinableRequest {
  associatedtype RowDecoder : TableRecord
}
extension JoinableRequest {
  public func including<A>(all association: A) -> Self where A : AssociationToMany, Self.RowDecoder == A.OriginRowDecoder
  public func including<A>(optional association: A) -> Self where A : Association, Self.RowDecoder == A.OriginRowDecoder
  public func including<A>(required association: A) -> Self where A : Association, Self.RowDecoder == A.OriginRowDecoder
  public func joining<A>(optional association: A) -> Self where A : Association, Self.RowDecoder == A.OriginRowDecoder
  public func joining<A>(required association: A) -> Self where A : Association, Self.RowDecoder == A.OriginRowDecoder
}
public protocol DerivableRequest : FilteredRequest, JoinableRequest, OrderedRequest, SelectionRequest, TableRequest {
}
extension FetchRequest where Self.RowDecoder == Row {
  public func observationForAll() -> ValueObservation<ValueReducers.AllRows>
  public func observationForFirst() -> ValueObservation<ValueReducers.OneRow>
}
extension ValueObservation where Reducer == () {
  @available(*, deprecated, message: "Use request.observationForAll() instead")
  public static func trackingAll<Request>(_ request: Request) -> ValueObservation<RowsReducer> where Request : FetchRequest, Request.RowDecoder == Row
  @available(*, deprecated, message: "Use request.observationForFirst() instead")
  public static func trackingOne<Request>(_ request: Request) -> ValueObservation<RowReducer> where Request : FetchRequest, Request.RowDecoder == Row
}
extension ValueReducers {
  public struct AllRows : ValueReducer {
    public func fetch(_ db: Database) throws -> [Row]
    public mutating func value(_ rows: [Row]) -> [Row]?
    public typealias Fetched = [Row]
    public typealias Value = [Row]
  }
  public struct OneRow : ValueReducer {
    public func fetch(_ db: Database) throws -> Row?
    public mutating func value(_ row: Row?) -> Row??
    public typealias Fetched = Row?
    public typealias Value = Row?
  }
}
@available(*, deprecated, renamed: "ValueReducers.AllRows")
public typealias RowsReducer = ValueReducers.AllRows
@available(*, deprecated, renamed: "ValueReducers.OneRow")
public typealias RowReducer = ValueReducers.OneRow
extension ValueObservation where Reducer : ValueReducer {
  public func map<T>(_ transform: @escaping (Reducer.Value) -> T) -> ValueObservation<ValueReducers.Map<Reducer, T>>
}
extension ValueReducer {
  public func map<T>(_ transform: @escaping (Self.Value) -> T) -> ValueReducers.Map<Self, T>
}
extension ValueReducers {
  public struct Map<Base, Value> : ValueReducer where Base : ValueReducer {
    public func fetch(_ db: Database) throws -> Base.Fetched
    public mutating func value(_ fetched: Base.Fetched) -> Value?
    public typealias Fetched = Base.Fetched
  }
}
@available(*, deprecated, renamed: "ValueReducers.Map")
public typealias MapValueReducer<Base, Value> = ValueReducers.Map<Base, Value> where Base : ValueReducer
public struct FTS3TokenizerDescriptor {
  public static let simple: FTS3TokenizerDescriptor
  public static let porter: FTS3TokenizerDescriptor
  @available(macOS 10.10, *)
  public static func unicode61(diacritics: FTS3.Diacritics = .removeLegacy, separators: Swift.Set<Swift.Character> = [], tokenCharacters: Swift.Set<Swift.Character> = []) -> FTS3TokenizerDescriptor
}
extension ValueObservation where Reducer : ValueReducer, Reducer.Value : Swift.Equatable {
  @available(*, deprecated, renamed: "removeDuplicates")
  public func distinctUntilChanged() -> ValueObservation<ValueReducers.RemoveDuplicates<Reducer>>
  public func removeDuplicates() -> ValueObservation<ValueReducers.RemoveDuplicates<Reducer>>
}
extension ValueReducer where Self.Value : Swift.Equatable {
  @available(*, deprecated, renamed: "removeDuplicates")
  public func distinctUntilChanged() -> ValueReducers.RemoveDuplicates<Self>
  public func removeDuplicates() -> ValueReducers.RemoveDuplicates<Self>
}
extension ValueReducers {
  public struct RemoveDuplicates<Base> : ValueReducer where Base : ValueReducer, Base.Value : Swift.Equatable {
    public func fetch(_ db: Database) throws -> Base.Fetched
    public mutating func value(_ fetched: Base.Fetched) -> Base.Value?
    public typealias Fetched = Base.Fetched
    public typealias Value = Base.Value
  }
}
@available(*, deprecated, renamed: "ValueReducers.RemoveDuplicates")
public typealias DistinctUntilChangedValueReducer<Base> = ValueReducers.RemoveDuplicates<Base> where Base : ValueReducer, Base.Value : Swift.Equatable
public protocol VirtualTableModule {
  associatedtype TableDefinition
  var moduleName: Swift.String { get }
  func makeTableDefinition() -> Self.TableDefinition
  func moduleArguments(for definition: Self.TableDefinition, in db: Database) throws -> [Swift.String]
  func database(_ db: Database, didCreate tableName: Swift.String, using definition: Self.TableDefinition) throws
}
extension Database {
  final public func create(virtualTable name: Swift.String, ifNotExists: Swift.Bool = false, using module: Swift.String) throws
  final public func create<Module>(virtualTable tableName: Swift.String, ifNotExists: Swift.Bool = false, using module: Module, _ body: ((Module.TableDefinition) -> Swift.Void)? = nil) throws where Module : VirtualTableModule
}
public struct SQLCollatedExpression {
  public let expression: any SQLExpression
  public let collationName: Database.CollationName
  public var asc: any SQLOrderingTerm {
    get
  }
  public var desc: any SQLOrderingTerm {
    get
  }
}
extension SQLCollatedExpression : SQLOrderingTerm {
  public var reversed: any SQLOrderingTerm {
    get
  }
  public func orderingTermSQL(_ context: inout SQLGenerationContext) -> Swift.String
  public func qualifiedOrdering(with alias: TableAlias) -> any SQLOrderingTerm
}
public protocol Association : DerivableRequest {
  associatedtype OriginRowDecoder : TableRecord
  var sqlAssociation: SQLAssociation { get }
  func forKey(_ key: Swift.String) -> Self
  init(sqlAssociation: SQLAssociation)
}
extension Association {
  public func _including(all association: SQLAssociation) -> Self
  public func _including(optional association: SQLAssociation) -> Self
  public func _including(required association: SQLAssociation) -> Self
  public func _joining(optional association: SQLAssociation) -> Self
  public func _joining(required association: SQLAssociation) -> Self
}
extension Association {
  public func select(_ selection: [any SQLSelectable]) -> Self
  public func annotated(with selection: [any SQLSelectable]) -> Self
  public func filter(_ predicate: @escaping (Database) throws -> any SQLExpressible) -> Self
  public func order(_ orderings: @escaping (Database) throws -> [any SQLOrderingTerm]) -> Self
  public func reversed() -> Self
  public func unordered() -> Self
  public func forKey(_ codingKey: any Swift.CodingKey) -> Self
  public func aliased(_ alias: TableAlias) -> Self
}
extension Association {
  public var databaseTableName: Swift.String {
    get
  }
}
public protocol AssociationToOne : Association {
}
extension AssociationToOne {
  public func forKey(_ key: Swift.String) -> Self
}
public protocol AssociationToMany : Association {
}
extension AssociationToMany {
  public func forKey(_ key: Swift.String) -> Self
}
extension AssociationToMany {
  public var count: AssociationAggregate<Self.OriginRowDecoder> {
    get
  }
  public var isEmpty: AssociationAggregate<Self.OriginRowDecoder> {
    get
  }
  public func average(_ expression: any SQLExpressible) -> AssociationAggregate<Self.OriginRowDecoder>
  public func max(_ expression: any SQLExpressible) -> AssociationAggregate<Self.OriginRowDecoder>
  public func min(_ expression: any SQLExpressible) -> AssociationAggregate<Self.OriginRowDecoder>
  public func sum(_ expression: any SQLExpressible) -> AssociationAggregate<Self.OriginRowDecoder>
}
@objc public protocol ATOMEventMatchDelegate {
  @objc func matchedEvent(withName name: Swift.String, withValue value: Any?)
}
@_inheritsConvenienceInitializers @objc final public class EventAPI : ObjectiveC.NSObject {
  weak public static var delegate: (any ATOMEventMatchDelegate)?
  @objc public static func fire(event: ATOMEvent, withDelegate delegate: (any ATOMEventMatchDelegate)? = nil) throws
  @objc override dynamic public init()
  @objc deinit
}
public struct HasOneThroughAssociation<Origin, Destination> : AssociationToOne where Origin : TableRecord, Destination : TableRecord {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var sqlAssociation: SQLAssociation
  public init(sqlAssociation: SQLAssociation)
}
extension DatabaseValueConvertible where Self : Swift.Encodable {
  public var databaseValue: DatabaseValue {
    get
  }
}
extension DatabaseValueConvertible where Self : Swift.Encodable, Self : Swift.RawRepresentable, Self.RawValue : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
}
public struct TouchConfiguration {
  public var color: UIKit.UIColor?
  public var image: UIKit.UIImage?
  public var defaultSize: CoreFoundation.CGSize
  public var showsTimer: Swift.Bool
  public var showsTouchRadius: Swift.Bool
  public var showsLog: Swift.Bool
  public init()
}
extension FetchRequest where Self.RowDecoder : DatabaseValueConvertible {
  public func observationForAll() -> ValueObservation<ValueReducers.AllValues<Self.RowDecoder>>
  public func observationForFirst() -> ValueObservation<ValueReducers.OneValue<Self.RowDecoder>>
}
extension FetchRequest where Self.RowDecoder : _OptionalProtocol, Self.RowDecoder._Wrapped : DatabaseValueConvertible {
  public func observationForAll() -> ValueObservation<ValueReducers.AllOptionalValues<Self.RowDecoder._Wrapped>>
  public func observationForFirst() -> ValueObservation<ValueReducers.OneValue<Self.RowDecoder._Wrapped>>
}
extension ValueObservation where Reducer == () {
  @available(*, deprecated, message: "Use request.observationForAll() instead")
  public static func trackingAll<Request>(_ request: Request) -> ValueObservation<DatabaseValuesReducer<Request.RowDecoder>> where Request : FetchRequest, Request.RowDecoder : DatabaseValueConvertible
  @available(*, deprecated, message: "Use request.observationForFirst() instead")
  public static func trackingOne<Request>(_ request: Request) -> ValueObservation<DatabaseValueReducer<Request.RowDecoder>> where Request : FetchRequest, Request.RowDecoder : DatabaseValueConvertible
  @available(*, deprecated, message: "Use request.observationForAll() instead")
  public static func trackingAll<Request>(_ request: Request) -> ValueObservation<OptionalDatabaseValuesReducer<Request.RowDecoder._Wrapped>> where Request : FetchRequest, Request.RowDecoder : _OptionalProtocol, Request.RowDecoder._Wrapped : DatabaseValueConvertible
}
extension ValueReducers {
  public struct AllValues<RowDecoder> : ValueReducer where RowDecoder : DatabaseValueConvertible {
    public func fetch(_ db: Database) throws -> [DatabaseValue]
    public mutating func value(_ dbValues: [DatabaseValue]) -> [RowDecoder]?
    public typealias Fetched = [DatabaseValue]
    public typealias Value = [RowDecoder]
  }
  public struct OneValue<RowDecoder> : ValueReducer where RowDecoder : DatabaseValueConvertible {
    public func fetch(_ db: Database) throws -> DatabaseValue?
    public mutating func value(_ dbValue: DatabaseValue?) -> RowDecoder??
    public typealias Fetched = DatabaseValue?
    public typealias Value = RowDecoder?
  }
  public struct AllOptionalValues<RowDecoder> : ValueReducer where RowDecoder : DatabaseValueConvertible {
    public func fetch(_ db: Database) throws -> [DatabaseValue]
    public mutating func value(_ dbValues: [DatabaseValue]) -> [RowDecoder?]?
    public typealias Fetched = [DatabaseValue]
    public typealias Value = [RowDecoder?]
  }
}
@available(*, deprecated, renamed: "ValueReducers.AllValues")
public typealias DatabaseValuesReducer<RowDecoder> = ValueReducers.AllValues<RowDecoder> where RowDecoder : DatabaseValueConvertible
@available(*, deprecated, renamed: "ValueReducers.OneValue")
public typealias DatabaseValueReducer<RowDecoder> = ValueReducers.OneValue<RowDecoder> where RowDecoder : DatabaseValueConvertible
@available(*, deprecated, renamed: "ValueReducers.AllOptionalValues")
public typealias OptionalDatabaseValuesReducer<RowDecoder> = ValueReducers.AllOptionalValues<RowDecoder> where RowDecoder : DatabaseValueConvertible
extension ValueObservation where Reducer : ValueReducer {
  public func compactMap<T>(_ transform: @escaping (Reducer.Value) -> T?) -> ValueObservation<ValueReducers.CompactMap<Reducer, T>>
}
extension ValueReducer {
  public func compactMap<T>(_ transform: @escaping (Self.Value) -> T?) -> ValueReducers.CompactMap<Self, T>
}
extension ValueReducers {
  public struct CompactMap<Base, Value> : ValueReducer where Base : ValueReducer {
    public func fetch(_ db: Database) throws -> Base.Fetched
    public mutating func value(_ fetched: Base.Fetched) -> Value?
    public typealias Fetched = Base.Fetched
  }
}
@available(*, deprecated, renamed: "ValueReducers.CompactMap")
public typealias CompactMapValueReducer<Base, Value> = ValueReducers.CompactMap<Base, Value> where Base : ValueReducer
@_hasMissingDesignatedInitializers public class DatabaseSnapshot : DatabaseReader {
  public var configuration: Configuration {
    get
  }
  @objc deinit
}
extension DatabaseSnapshot {
  public func interrupt()
  public func read<T>(_ block: (Database) throws -> T) rethrows -> T
  public func asyncRead(_ block: @escaping (Swift.Result<Database, any Swift.Error>) -> Swift.Void)
  public func unsafeRead<T>(_ block: (Database) throws -> T) rethrows -> T
  public func unsafeReentrantRead<T>(_ block: (Database) throws -> T) throws -> T
  public func add(function: DatabaseFunction)
  public func remove(function: DatabaseFunction)
  public func add(collation: DatabaseCollation)
  public func remove(collation: DatabaseCollation)
  public func add<Reducer>(observation: ValueObservation<Reducer>, onError: @escaping (any Swift.Error) -> Swift.Void, onChange: @escaping (Reducer.Value) -> Swift.Void) -> any TransactionObserver where Reducer : ValueReducer
  public func remove(transactionObserver: any TransactionObserver)
}
public protocol EncodableRecord {
  func encode(to container: inout PersistenceContainer)
  static var databaseEncodingUserInfo: [Swift.CodingUserInfoKey : Any] { get }
  static func databaseJSONEncoder(for column: Swift.String) -> Foundation.JSONEncoder
  static var databaseDateEncodingStrategy: DatabaseDateEncodingStrategy { get }
  static var databaseUUIDEncodingStrategy: DatabaseUUIDEncodingStrategy { get }
}
extension EncodableRecord {
  public static var databaseEncodingUserInfo: [Swift.CodingUserInfoKey : Any] {
    get
  }
  public static func databaseJSONEncoder(for column: Swift.String) -> Foundation.JSONEncoder
  public static var databaseDateEncodingStrategy: DatabaseDateEncodingStrategy {
    get
  }
  public static var databaseUUIDEncodingStrategy: DatabaseUUIDEncodingStrategy {
    get
  }
}
extension EncodableRecord {
  public var databaseDictionary: [Swift.String : DatabaseValue] {
    get
  }
}
extension EncodableRecord {
  public func databaseEquals(_ record: Self) -> Swift.Bool
  public func databaseChanges<Record>(from record: Record) -> [Swift.String : DatabaseValue] where Record : EncodableRecord
}
public struct PersistenceContainer {
  @usableFromInline
  internal var storage: OrderedDictionary<Swift.String, (any DatabaseValueConvertible)?>
  @inlinable public subscript(column: Swift.String) -> (any DatabaseValueConvertible)? {
    get { return storage[column] ?? nil }
    set { storage.updateValue(newValue, forKey: column) }
  }
  @inlinable public subscript<Column>(column: Column) -> (any DatabaseValueConvertible)? where Column : ColumnExpression {
    get { return self[column.name] }
    set { self[column.name] = newValue }
  }
}
public enum DatabaseDateEncodingStrategy {
  case deferredToDate
  case timeIntervalSinceReferenceDate
  case timeIntervalSince1970
  case secondsSince1970
  case millisecondsSince1970
  @available(macOS 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  case iso8601
  case formatted(Foundation.DateFormatter)
  case custom((Foundation.Date) -> (any DatabaseValueConvertible)?)
}
public enum DatabaseUUIDEncodingStrategy {
  case deferredToUUID
  case string
  public static func == (a: DatabaseUUIDEncodingStrategy, b: DatabaseUUIDEncodingStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct HasOneAssociation<Origin, Destination> : AssociationToOne where Origin : TableRecord, Destination : TableRecord {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var sqlAssociation: SQLAssociation
  public init(sqlAssociation: SQLAssociation)
}
extension TableRequest where Self : FilteredRequest {
  public func matching(_ pattern: FTS3Pattern?) -> Self
}
extension TableRecord {
  public static func matching(_ pattern: FTS3Pattern?) -> QueryInterfaceRequest<Self>
}
extension ColumnExpression {
  public func match(_ pattern: FTS3Pattern?) -> any SQLExpression
}
final public class DatabaseQueue : DatabaseWriter {
  final public var configuration: Configuration {
    get
  }
  final public var path: Swift.String {
    get
  }
  public init(path: Swift.String, configuration: Configuration = Configuration()) throws
  public init(configuration: Configuration = Configuration())
  @objc deinit
}
extension DatabaseQueue {
  final public func releaseMemory()
  @available(*, deprecated, message: "Memory management is now enabled by default. This deprecated method does nothing.")
  final public func setupMemoryManagement(in application: UIKit.UIApplication)
}
extension DatabaseQueue {
  final public func interrupt()
  final public func read<T>(_ block: (Database) throws -> T) rethrows -> T
  final public func asyncRead(_ block: @escaping (Swift.Result<Database, any Swift.Error>) -> Swift.Void)
  final public func unsafeRead<T>(_ block: (Database) throws -> T) rethrows -> T
  final public func unsafeReentrantRead<T>(_ block: (Database) throws -> T) rethrows -> T
  final public func concurrentRead<T>(_ block: @escaping (Database) throws -> T) -> DatabaseFuture<T>
  final public func spawnConcurrentRead(_ block: @escaping (Swift.Result<Database, any Swift.Error>) -> Swift.Void)
  final public func inTransaction(_ kind: Database.TransactionKind? = nil, _ updates: (Database) throws -> Database.TransactionCompletion) throws
  final public func writeWithoutTransaction<T>(_ updates: (Database) throws -> T) rethrows -> T
  final public func barrierWriteWithoutTransaction<T>(_ updates: (Database) throws -> T) rethrows -> T
  final public func inDatabase<T>(_ updates: (Database) throws -> T) rethrows -> T
  final public func unsafeReentrantWrite<T>(_ updates: (Database) throws -> T) rethrows -> T
  final public func asyncWriteWithoutTransaction(_ updates: @escaping (Database) -> Swift.Void)
  final public func add(function: DatabaseFunction)
  final public func remove(function: DatabaseFunction)
  final public func add(collation: DatabaseCollation)
  final public func remove(collation: DatabaseCollation)
}
public struct AssociationAggregate<RowDecoder> {
}
extension AssociationAggregate {
  @available(*, deprecated, renamed: "forKey(_:)")
  public func aliased(_ name: Swift.String) -> AssociationAggregate<RowDecoder>
  public func forKey(_ key: Swift.String) -> AssociationAggregate<RowDecoder>
  @available(*, deprecated, renamed: "forKey(_:)")
  public func aliased(_ key: any Swift.CodingKey) -> AssociationAggregate<RowDecoder>
  public func forKey(_ key: any Swift.CodingKey) -> AssociationAggregate<RowDecoder>
}
prefix public func ! <RowDecoder>(aggregate: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func && <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func && <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public func && <RowDecoder>(lhs: any SQLExpressible, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func || <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func || <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public func || <RowDecoder>(lhs: any SQLExpressible, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: any SQLExpressible, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: Swift.Bool) -> AssociationAggregate<RowDecoder>
public func == <RowDecoder>(lhs: Swift.Bool, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: any SQLExpressible, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: Swift.Bool) -> AssociationAggregate<RowDecoder>
public func != <RowDecoder>(lhs: Swift.Bool, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func === <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func === <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public func === <RowDecoder>(lhs: any SQLExpressible, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func !== <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func !== <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public func !== <RowDecoder>(lhs: any SQLExpressible, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func <= <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func <= <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public func <= <RowDecoder>(lhs: any SQLExpressible, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func < <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func < <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public func < <RowDecoder>(lhs: any SQLExpressible, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func > <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func > <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public func > <RowDecoder>(lhs: any SQLExpressible, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func >= <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func >= <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public func >= <RowDecoder>(lhs: any SQLExpressible, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
prefix public func - <RowDecoder>(aggregate: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func + <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func + <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public func + <RowDecoder>(lhs: any SQLExpressible, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func - <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func - <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public func - <RowDecoder>(lhs: any SQLExpressible, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func * <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func * <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public func * <RowDecoder>(lhs: any SQLExpressible, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func / <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func / <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public func / <RowDecoder>(lhs: any SQLExpressible, rhs: AssociationAggregate<RowDecoder>) -> AssociationAggregate<RowDecoder>
public func ?? <RowDecoder>(lhs: AssociationAggregate<RowDecoder>, rhs: any SQLExpressible) -> AssociationAggregate<RowDecoder>
public protocol ColumnExpression : SQLExpression {
  var name: Swift.String { get }
}
extension ColumnExpression {
  public func expressionSQL(_ context: inout SQLGenerationContext, wrappedInParenthesis: Swift.Bool) -> Swift.String
  public func qualifiedExpression(with alias: TableAlias) -> any SQLExpression
}
public struct Column : ColumnExpression {
  public static let rowID: Column
  public var name: Swift.String
  public init(_ name: Swift.String)
  public init(_ codingKey: any Swift.CodingKey)
}
extension ColumnExpression where Self : Swift.RawRepresentable, Self.RawValue == Swift.String {
  public var name: Swift.String {
    get
  }
}
open class Record : FetchableRecord, TableRecord, PersistableRecord {
  public init()
  required public init(row: Row)
  open class var databaseTableName: Swift.String {
    get
  }
  open class var persistenceConflictPolicy: PersistenceConflictPolicy {
    get
  }
  open class var databaseSelection: [any SQLSelectable] {
    get
  }
  open func encode(to container: inout PersistenceContainer)
  open func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  open func copy() -> Self
  public var hasDatabaseChanges: Swift.Bool {
    get
    set
  }
  public var databaseChanges: [Swift.String : DatabaseValue?] {
    get
  }
  open func insert(_ db: Database) throws
  open func update(_ db: Database, columns: Swift.Set<Swift.String>) throws
  @discardableResult
  final public func updateChanges(_ db: Database) throws -> Swift.Bool
  final public func save(_ db: Database) throws
  @discardableResult
  open func delete(_ db: Database) throws -> Swift.Bool
  @objc deinit
}
public struct DatabaseValue : Swift.Hashable, Swift.CustomStringConvertible, DatabaseValueConvertible, SQLExpression {
  public let storage: DatabaseValue.Storage
  public static let null: DatabaseValue
  public enum Storage : Swift.Equatable {
    case null
    case int64(Swift.Int64)
    case double(Swift.Double)
    case string(Swift.String)
    case blob(Foundation.Data)
    public var value: (any DatabaseValueConvertible)? {
      get
    }
    public static func == (lhs: DatabaseValue.Storage, rhs: DatabaseValue.Storage) -> Swift.Bool
  }
  public init?(value: Any)
  public var isNull: Swift.Bool {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension DatabaseValue {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: DatabaseValue, rhs: DatabaseValue) -> Swift.Bool
}
extension DatabaseValue {
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> DatabaseValue?
}
extension DatabaseValue {
  public var sqlExpression: any SQLExpression {
    get
  }
}
extension DatabaseValue {
  public func expressionSQL(_ context: inout SQLGenerationContext, wrappedInParenthesis: Swift.Bool) -> Swift.String
  public var negated: any SQLExpression {
    get
  }
  public func qualifiedExpression(with alias: TableAlias) -> any SQLExpression
}
extension DatabaseValue {
  public var description: Swift.String {
    get
  }
}
public enum ATOMGesturesList : Swift.String, Swift.CaseIterable {
  case swipeUp
  case swipeDown
  case swipeLeft
  case swipeRight
  case pinchIn
  case pinchOut
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ATOMGesturesList]
  public typealias RawValue = Swift.String
  public static var allCases: [ATOMGesturesList] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public protocol ATOMGesturesTrackerDelegate : AnyObject {
  func gestureTracked(_ gesture: ATOMGesturesList)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AtomGestures : ObjectiveC.NSObject {
  weak public static var delegate: (any ATOMGesturesTrackerDelegate)?
  public static func start()
  public static func stop()
  @objc deinit
}
extension AtomGestures {
  public static func getGestures(withQuery q: Swift.String? = nil) throws -> [GestureObject]
  public static func getSwipeGestures(withQuery q: Swift.String? = nil) throws -> [SwipeDataPoint]
  public static func getPinchGestures(withQuery q: Swift.String? = nil) throws -> [PinchDataPoint]
  public static func getSwipeTicks(withQuery q: Swift.String? = nil) throws -> [SwipeTick]
  public static func getPinchTicks(withQuery q: Swift.String? = nil) throws -> [PinchTick]
}
extension AtomGestures {
  public static func deleteAllGestures() throws
  public static func deletePrevious1000Gestures() throws
  public static func deleteAllSwipeGestures() throws
  public static func deleteAllPinchGestures() throws
  public static func deleteAllSwipeTicks() throws
  public static func deleteAllPinchTicks() throws
}
@objc @_hasMissingDesignatedInitializers public class Cohort : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension Cohort {
  public func id() -> Swift.Int
  public func name() -> Swift.String
  public func relevancy() -> Swift.Int
  public func isEvent() -> Swift.Bool
  public func ttl() -> Swift.Int
  public func assignDate() -> Swift.Int?
}
public func splittingRowAdapters(columnCounts: [Swift.Int]) -> [any RowAdapter]
public struct LayoutedColumnMapping {
  public let layoutColumns: [(Swift.Int, Swift.String)]
  public init<S>(layoutColumns: S) where S : Swift.Sequence, S.Element == (Swift.Int, Swift.String)
}
extension LayoutedColumnMapping : LayoutedRowAdapter {
  public var mapping: LayoutedColumnMapping {
    get
  }
  public var scopes: [Swift.String : any LayoutedRowAdapter] {
    get
  }
}
extension LayoutedColumnMapping : RowLayout {
  public func layoutIndex(ofColumn name: Swift.String) -> Swift.Int?
}
public protocol LayoutedRowAdapter {
  var mapping: LayoutedColumnMapping { get }
  var scopes: [Swift.String : any LayoutedRowAdapter] { get }
}
public protocol RowLayout {
  var layoutColumns: [(Swift.Int, Swift.String)] { get }
  func layoutIndex(ofColumn name: Swift.String) -> Swift.Int?
}
extension SelectStatement : RowLayout {
  final public var layoutColumns: [(Swift.Int, Swift.String)] {
    get
  }
  final public func layoutIndex(ofColumn name: Swift.String) -> Swift.Int?
}
public protocol RowAdapter {
  func layoutedAdapter(from layout: any RowLayout) throws -> any LayoutedRowAdapter
}
extension RowAdapter {
  public func addingScopes(_ scopes: [Swift.String : any RowAdapter]) -> any RowAdapter
}
public struct EmptyRowAdapter : RowAdapter {
  public init()
  public func layoutedAdapter(from layout: any RowLayout) throws -> any LayoutedRowAdapter
}
public struct ColumnMapping : RowAdapter {
  public init(_ mapping: [Swift.String : Swift.String])
  public func layoutedAdapter(from layout: any RowLayout) throws -> any LayoutedRowAdapter
}
public struct SuffixRowAdapter : RowAdapter {
  public init(fromIndex index: Swift.Int)
  public func layoutedAdapter(from layout: any RowLayout) throws -> any LayoutedRowAdapter
}
public struct RangeRowAdapter : RowAdapter {
  public init(_ range: Swift.CountableRange<Swift.Int>)
  public init(_ range: Swift.CountableClosedRange<Swift.Int>)
  public func layoutedAdapter(from layout: any RowLayout) throws -> any LayoutedRowAdapter
}
public struct ScopeAdapter : RowAdapter {
  public init(_ scopes: [Swift.String : any RowAdapter])
  public init(base: any RowAdapter, scopes: [Swift.String : any RowAdapter])
  public func layoutedAdapter(from layout: any RowLayout) throws -> any LayoutedRowAdapter
}
@_inheritsConvenienceInitializers @objc public class AtomLogLevels : ObjectiveC.NSObject {
  @objc public static let none: Swift.String
  @objc public static let error: Swift.String
  @objc public static let debug: Swift.String
  @objc public static let gesture: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ATOMVisualizer : ObjectiveC.NSObject {
  public static let sharedInstance: ATOMVisualizer
  @objc deinit
  final public func removeAllTouchViews()
}
extension ATOMVisualizer {
  final public class func isEnabled() -> Swift.Bool
  final public class func start(_ config: TouchConfiguration = TouchConfiguration())
  final public class func stop()
  final public class func getTouches() -> [UIKit.UITouch]
  final public func handleEvent(_ event: UIKit.UIEvent)
}
extension ATOMVisualizer {
  final public func log(_ touch: UIKit.UITouch)
}
final public class DatabaseFunction : Swift.Hashable {
  final public var name: Swift.String {
    get
  }
  public init(_ name: Swift.String, argumentCount: Swift.Int32? = nil, pure: Swift.Bool = false, function: @escaping ([DatabaseValue]) throws -> (any DatabaseValueConvertible)?)
  public init<Aggregate>(_ name: Swift.String, argumentCount: Swift.Int32? = nil, pure: Swift.Bool = false, aggregate: Aggregate.Type) where Aggregate : DatabaseAggregate
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
extension DatabaseFunction {
  final public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: DatabaseFunction, rhs: DatabaseFunction) -> Swift.Bool
}
public protocol DatabaseAggregate {
  init()
  mutating func step(_ dbValues: [DatabaseValue]) throws
  func finalize() throws -> (any DatabaseValueConvertible)?
}
extension Foundation.Data : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        if let bytes = sqlite3_column_blob(sqliteStatement, index) {
            let count = Int(sqlite3_column_bytes(sqliteStatement, index))
            self.init(bytes: bytes, count: count) // copy bytes
        } else {
            self.init()
        }
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Foundation.Data?
}
public struct ResultCode : Swift.RawRepresentable, Swift.Equatable, Swift.CustomStringConvertible {
  public let rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public var primaryResultCode: ResultCode {
    get
  }
  public static func ~= (pattern: ResultCode, code: ResultCode) -> Swift.Bool
  public static let SQLITE_OK: ResultCode
  public static let SQLITE_ERROR: ResultCode
  public static let SQLITE_INTERNAL: ResultCode
  public static let SQLITE_PERM: ResultCode
  public static let SQLITE_ABORT: ResultCode
  public static let SQLITE_BUSY: ResultCode
  public static let SQLITE_LOCKED: ResultCode
  public static let SQLITE_NOMEM: ResultCode
  public static let SQLITE_READONLY: ResultCode
  public static let SQLITE_INTERRUPT: ResultCode
  public static let SQLITE_IOERR: ResultCode
  public static let SQLITE_CORRUPT: ResultCode
  public static let SQLITE_NOTFOUND: ResultCode
  public static let SQLITE_FULL: ResultCode
  public static let SQLITE_CANTOPEN: ResultCode
  public static let SQLITE_PROTOCOL: ResultCode
  public static let SQLITE_EMPTY: ResultCode
  public static let SQLITE_SCHEMA: ResultCode
  public static let SQLITE_TOOBIG: ResultCode
  public static let SQLITE_CONSTRAINT: ResultCode
  public static let SQLITE_MISMATCH: ResultCode
  public static let SQLITE_MISUSE: ResultCode
  public static let SQLITE_NOLFS: ResultCode
  public static let SQLITE_AUTH: ResultCode
  public static let SQLITE_FORMAT: ResultCode
  public static let SQLITE_RANGE: ResultCode
  public static let SQLITE_NOTADB: ResultCode
  public static let SQLITE_NOTICE: ResultCode
  public static let SQLITE_WARNING: ResultCode
  public static let SQLITE_ROW: ResultCode
  public static let SQLITE_DONE: ResultCode
  public static let SQLITE_ERROR_MISSING_COLLSEQ: ResultCode
  public static let SQLITE_ERROR_RETRY: ResultCode
  public static let SQLITE_ERROR_SNAPSHOT: ResultCode
  public static let SQLITE_IOERR_READ: ResultCode
  public static let SQLITE_IOERR_SHORT_READ: ResultCode
  public static let SQLITE_IOERR_WRITE: ResultCode
  public static let SQLITE_IOERR_FSYNC: ResultCode
  public static let SQLITE_IOERR_DIR_FSYNC: ResultCode
  public static let SQLITE_IOERR_TRUNCATE: ResultCode
  public static let SQLITE_IOERR_FSTAT: ResultCode
  public static let SQLITE_IOERR_UNLOCK: ResultCode
  public static let SQLITE_IOERR_RDLOCK: ResultCode
  public static let SQLITE_IOERR_DELETE: ResultCode
  public static let SQLITE_IOERR_BLOCKED: ResultCode
  public static let SQLITE_IOERR_NOMEM: ResultCode
  public static let SQLITE_IOERR_ACCESS: ResultCode
  public static let SQLITE_IOERR_CHECKRESERVEDLOCK: ResultCode
  public static let SQLITE_IOERR_LOCK: ResultCode
  public static let SQLITE_IOERR_CLOSE: ResultCode
  public static let SQLITE_IOERR_DIR_CLOSE: ResultCode
  public static let SQLITE_IOERR_SHMOPEN: ResultCode
  public static let SQLITE_IOERR_SHMSIZE: ResultCode
  public static let SQLITE_IOERR_SHMLOCK: ResultCode
  public static let SQLITE_IOERR_SHMMAP: ResultCode
  public static let SQLITE_IOERR_SEEK: ResultCode
  public static let SQLITE_IOERR_DELETE_NOENT: ResultCode
  public static let SQLITE_IOERR_MMAP: ResultCode
  public static let SQLITE_IOERR_GETTEMPPATH: ResultCode
  public static let SQLITE_IOERR_CONVPATH: ResultCode
  public static let SQLITE_IOERR_VNODE: ResultCode
  public static let SQLITE_IOERR_AUTH: ResultCode
  public static let SQLITE_IOERR_BEGIN_ATOMIC: ResultCode
  public static let SQLITE_IOERR_COMMIT_ATOMIC: ResultCode
  public static let SQLITE_IOERR_ROLLBACK_ATOMIC: ResultCode
  public static let SQLITE_LOCKED_SHAREDCACHE: ResultCode
  public static let SQLITE_LOCKED_VTAB: ResultCode
  public static let SQLITE_BUSY_RECOVERY: ResultCode
  public static let SQLITE_BUSY_SNAPSHOT: ResultCode
  public static let SQLITE_CANTOPEN_NOTEMPDIR: ResultCode
  public static let SQLITE_CANTOPEN_ISDIR: ResultCode
  public static let SQLITE_CANTOPEN_FULLPATH: ResultCode
  public static let SQLITE_CANTOPEN_CONVPATH: ResultCode
  public static let SQLITE_CANTOPEN_DIRTYWAL: ResultCode
  public static let SQLITE_CORRUPT_VTAB: ResultCode
  public static let SQLITE_CORRUPT_SEQUENCE: ResultCode
  public static let SQLITE_READONLY_RECOVERY: ResultCode
  public static let SQLITE_READONLY_CANTLOCK: ResultCode
  public static let SQLITE_READONLY_ROLLBACK: ResultCode
  public static let SQLITE_READONLY_DBMOVED: ResultCode
  public static let SQLITE_READONLY_CANTINIT: ResultCode
  public static let SQLITE_READONLY_DIRECTORY: ResultCode
  public static let SQLITE_ABORT_ROLLBACK: ResultCode
  public static let SQLITE_CONSTRAINT_CHECK: ResultCode
  public static let SQLITE_CONSTRAINT_COMMITHOOK: ResultCode
  public static let SQLITE_CONSTRAINT_FOREIGNKEY: ResultCode
  public static let SQLITE_CONSTRAINT_FUNCTION: ResultCode
  public static let SQLITE_CONSTRAINT_NOTNULL: ResultCode
  public static let SQLITE_CONSTRAINT_PRIMARYKEY: ResultCode
  public static let SQLITE_CONSTRAINT_TRIGGER: ResultCode
  public static let SQLITE_CONSTRAINT_UNIQUE: ResultCode
  public static let SQLITE_CONSTRAINT_VTAB: ResultCode
  public static let SQLITE_CONSTRAINT_ROWID: ResultCode
  public static let SQLITE_NOTICE_RECOVER_WAL: ResultCode
  public static let SQLITE_NOTICE_RECOVER_ROLLBACK: ResultCode
  public static let SQLITE_WARNING_AUTOINDEX: ResultCode
  public static let SQLITE_AUTH_USER: ResultCode
  public static let SQLITE_OK_LOAD_PERMANENTLY: ResultCode
  public typealias RawValue = Swift.Int32
}
extension ResultCode {
  public var description: Swift.String {
    get
  }
}
public struct DatabaseError : Swift.Error, Swift.CustomStringConvertible, Foundation.CustomNSError {
  public var resultCode: ResultCode {
    get
  }
  public let extendedResultCode: ResultCode
  public let message: Swift.String?
  public let sql: Swift.String?
  public init(resultCode: ResultCode = .SQLITE_ERROR, message: Swift.String? = nil, sql: Swift.String? = nil, arguments: StatementArguments? = nil)
}
extension DatabaseError {
  public var isInterruptionError: Swift.Bool {
    get
  }
}
extension DatabaseError {
  public var description: Swift.String {
    get
  }
}
extension DatabaseError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public struct GestureObject {
}
extension Database {
  final public func add(transactionObserver: any TransactionObserver, extent: Database.TransactionObservationExtent = .observerLifetime)
  final public func remove(transactionObserver: any TransactionObserver)
  final public func afterNextTransactionCommit(_ closure: @escaping (Database) -> Swift.Void)
  public enum TransactionObservationExtent {
    case observerLifetime
    case nextTransaction
    case databaseLifetime
    public static func == (a: Database.TransactionObservationExtent, b: Database.TransactionObservationExtent) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public protocol TransactionObserver : AnyObject {
  func observes(eventsOfKind eventKind: DatabaseEventKind) -> Swift.Bool
  func databaseDidChange(with event: DatabaseEvent)
  func databaseWillCommit() throws
  func databaseDidCommit(_ db: Database)
  func databaseDidRollback(_ db: Database)
}
extension TransactionObserver {
  public func databaseWillCommit() throws
  public func stopObservingDatabaseChangesUntilNextTransaction()
}
public enum DatabaseEventKind {
  case insert(tableName: Swift.String)
  case delete(tableName: Swift.String)
  case update(tableName: Swift.String, columnNames: Swift.Set<Swift.String>)
}
extension DatabaseEventKind {
  public var tableName: Swift.String {
    get
  }
}
public struct DatabaseEvent {
  public enum Kind : Swift.Int32 {
    case insert
    case delete
    case update
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  public let kind: DatabaseEvent.Kind
  public var databaseName: Swift.String {
    get
  }
  public var tableName: Swift.String {
    get
  }
  public let rowID: Swift.Int64
  public func copy() -> DatabaseEvent
}
extension Foundation.NSString : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Self?
}
@_hasMissingDesignatedInitializers final public class Row : Swift.Equatable, Swift.Hashable, Swift.RandomAccessCollection, Swift.ExpressibleByDictionaryLiteral, Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  @usableFromInline
  final internal let statement: SelectStatement?
  @usableFromInline
  final internal let sqliteStatement: SQLiteStatement?
  final public let count: Swift.Int
  final public var prefetchedRows: Row.PrefetchedRowsView {
    get
  }
  convenience public init()
  convenience public init(_ dictionary: [Swift.String : (any DatabaseValueConvertible)?])
  convenience public init?(_ dictionary: [Swift.AnyHashable : Any])
  final public func copy() -> Row
  public typealias Element = (Swift.String, DatabaseValue)
  public typealias Index = RowIndex
  public typealias Indices = Swift.Range<RowIndex>
  public typealias Iterator = Swift.IndexingIterator<Row>
  public typealias Key = Swift.String
  public typealias SubSequence = Swift.Slice<Row>
  public typealias Value = (any DatabaseValueConvertible)?
  @objc deinit
  final public var hashValue: Swift.Int {
    get
  }
}
extension Row {
  final public var columnNames: Swift.LazyMapCollection<Row, Swift.String> {
    get
  }
  final public func hasColumn(_ columnName: Swift.String) -> Swift.Bool
  @usableFromInline
  final internal func index(ofColumn name: Swift.String) -> Swift.Int?
}
extension Row {
  @inlinable final internal func _checkIndex(_ index: Swift.Int, file: Swift.StaticString = #file, line: Swift.UInt = #line) {
        GRDBPrecondition(index >= 0 && index < count, "row index out of range", file: file, line: line)
    }
  final public var containsNonNullValue: Swift.Bool {
    get
  }
  final public func hasNull(atIndex index: Swift.Int) -> Swift.Bool
  final public subscript(index: Swift.Int) -> (any DatabaseValueConvertible)? {
    get
  }
  @inlinable final public subscript<Value>(index: Swift.Int) -> Value? where Value : DatabaseValueConvertible {
    get {
        _checkIndex(index)
        return Value.decodeIfPresent(from: self, atUncheckedIndex: index)
    }
  }
  @inlinable final public subscript<Value>(index: Swift.Int) -> Value? where Value : DatabaseValueConvertible, Value : StatementColumnConvertible {
    get {
        _checkIndex(index)
        return Value.fastDecodeIfPresent(from: self, atUncheckedIndex: index)
    }
  }
  @inlinable final public subscript<Value>(index: Swift.Int) -> Value where Value : DatabaseValueConvertible {
    get {
        _checkIndex(index)
        return Value.decode(from: self, atUncheckedIndex: index)
    }
  }
  @inlinable final public subscript<Value>(index: Swift.Int) -> Value where Value : DatabaseValueConvertible, Value : StatementColumnConvertible {
    get {
        _checkIndex(index)
        return Value.fastDecode(from: self, atUncheckedIndex: index)
    }
  }
  final public subscript(columnName: Swift.String) -> (any DatabaseValueConvertible)? {
    get
  }
  @inlinable final public subscript<Value>(columnName: Swift.String) -> Value? where Value : DatabaseValueConvertible {
    get {
        guard let index = index(ofColumn: columnName) else {
            return nil
        }
        return Value.decodeIfPresent(from: self, atUncheckedIndex: index)
    }
  }
  @inlinable final public subscript<Value>(columnName: Swift.String) -> Value? where Value : DatabaseValueConvertible, Value : StatementColumnConvertible {
    get {
        guard let index = index(ofColumn: columnName) else {
            return nil
        }
        return Value.fastDecodeIfPresent(from: self, atUncheckedIndex: index)
    }
  }
  @inlinable final public subscript<Value>(columnName: Swift.String) -> Value where Value : DatabaseValueConvertible {
    get {
        guard let index = index(ofColumn: columnName) else {
            // No such column
            fatalConversionError(to: Value.self, from: nil, in: self, atColumn: columnName)
        }
        return Value.decode(from: self, atUncheckedIndex: index)
    }
  }
  @inlinable final public subscript<Value>(columnName: Swift.String) -> Value where Value : DatabaseValueConvertible, Value : StatementColumnConvertible {
    get {
        guard let index = index(ofColumn: columnName) else {
            // No such column
            fatalConversionError(to: Value.self, from: nil, in: self, atColumn: columnName)
        }
        return Value.fastDecode(from: self, atUncheckedIndex: index)
    }
  }
  @inlinable final public subscript<Column>(column: Column) -> (any DatabaseValueConvertible)? where Column : ColumnExpression {
    get {
        return self[column.name]
    }
  }
  @inlinable final public subscript<Value, Column>(column: Column) -> Value? where Value : DatabaseValueConvertible, Column : ColumnExpression {
    get {
        return self[column.name]
    }
  }
  @inlinable final public subscript<Value, Column>(column: Column) -> Value? where Value : DatabaseValueConvertible, Value : StatementColumnConvertible, Column : ColumnExpression {
    get {
        return self[column.name]
    }
  }
  @inlinable final public subscript<Value, Column>(column: Column) -> Value where Value : DatabaseValueConvertible, Column : ColumnExpression {
    get {
        return self[column.name]
    }
  }
  @inlinable final public subscript<Value, Column>(column: Column) -> Value where Value : DatabaseValueConvertible, Value : StatementColumnConvertible, Column : ColumnExpression {
    get {
        return self[column.name]
    }
  }
  final public func dataNoCopy(atIndex index: Swift.Int) -> Foundation.Data?
  final public func dataNoCopy(named columnName: Swift.String) -> Foundation.Data?
  final public func dataNoCopy<Column>(_ column: Column) -> Foundation.Data? where Column : ColumnExpression
}
extension Row {
  final public var databaseValues: Swift.LazyMapCollection<Row, DatabaseValue> {
    get
  }
}
extension Row {
  final public subscript<Record>(scope: Swift.String) -> Record where Record : FetchableRecord {
    get
  }
  final public subscript<Record>(scope: Swift.String) -> Record? where Record : FetchableRecord {
    get
  }
  final public subscript<Collection>(key: Swift.String) -> Collection where Collection : Swift.RangeReplaceableCollection, Collection.Element : FetchableRecord {
    get
  }
  final public subscript<Record>(key: Swift.String) -> Swift.Set<Record> where Record : FetchableRecord, Record : Swift.Hashable {
    get
  }
}
extension Row {
  final public var scopes: Row.ScopesView {
    get
  }
  final public var scopesTree: Row.ScopesTreeView {
    get
  }
  final public var unscoped: Row {
    get
  }
  final public var unadapted: Row {
    get
  }
}
@_hasMissingDesignatedInitializers final public class RowCursor : Cursor {
  final public let statement: SelectStatement
  @usableFromInline
  final internal let _sqliteStatement: SQLiteStatement
  @usableFromInline
  final internal let _row: Row
  @usableFromInline
  final internal var _done: Swift.Bool
  @objc deinit
  @inlinable final public func next() throws -> Row? {
        if _done {
            // make sure this instance never yields a value again, even if the
            // statement is reset by another cursor.
            return nil
        }
        switch sqlite3_step(_sqliteStatement) {
        case SQLITE_DONE:
            _done = true
            return nil
        case SQLITE_ROW:
            return _row
        case let code:
            try statement.didFail(withResultCode: code)
        }
    }
  public typealias Element = Row
}
extension Row {
  public static func fetchCursor(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> RowCursor
  public static func fetchAll(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> [Row]
  public static func fetchOne(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> Row?
}
extension Row {
  public static func fetchCursor(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> RowCursor
  public static func fetchAll(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> [Row]
  public static func fetchOne(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> Row?
}
extension Row {
  public static func fetchCursor<R>(_ db: Database, _ request: R) throws -> RowCursor where R : FetchRequest
  public static func fetchAll<R>(_ db: Database, _ request: R) throws -> [Row] where R : FetchRequest
  public static func fetchOne<R>(_ db: Database, _ request: R) throws -> Row? where R : FetchRequest
}
extension FetchRequest where Self.RowDecoder == Row {
  public func fetchCursor(_ db: Database) throws -> RowCursor
  public func fetchAll(_ db: Database) throws -> [Row]
  public func fetchOne(_ db: Database) throws -> Row?
}
extension Row {
  convenience public init(dictionaryLiteral elements: (Swift.String, (any DatabaseValueConvertible)?)...)
}
extension Row {
  final public var startIndex: RowIndex {
    get
  }
  final public var endIndex: RowIndex {
    get
  }
  final public subscript(position: RowIndex) -> (Swift.String, DatabaseValue) {
    get
  }
}
extension Row {
  public static func == (lhs: Row, rhs: Row) -> Swift.Bool
}
extension Row {
  final public func hash(into hasher: inout Swift.Hasher)
}
extension Row {
  final public var description: Swift.String {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
}
public struct RowIndex : Swift.Comparable, Swift.Strideable {
  public typealias Stride = Swift.Int
}
extension RowIndex {
  public static func == (lhs: RowIndex, rhs: RowIndex) -> Swift.Bool
  public static func < (lhs: RowIndex, rhs: RowIndex) -> Swift.Bool
}
extension RowIndex {
  public func distance(to other: RowIndex) -> Swift.Int
  public func advanced(by n: Swift.Int) -> RowIndex
}
extension Row {
  public struct ScopesView : Swift.Collection {
    public typealias Index = Swift.Dictionary<Swift.String, any LayoutedRowAdapter>.Index
    public var names: Swift.Dictionary<Swift.String, any LayoutedRowAdapter>.Keys {
      get
    }
    public var startIndex: Row.ScopesView.Index {
      get
    }
    public var endIndex: Row.ScopesView.Index {
      get
    }
    public func index(after i: Row.ScopesView.Index) -> Row.ScopesView.Index
    public subscript(position: Row.ScopesView.Index) -> (name: Swift.String, row: Row) {
      get
    }
    public subscript(name: Swift.String) -> Row? {
      get
    }
    public typealias Element = (name: Swift.String, row: Row)
    public typealias Indices = Swift.DefaultIndices<Row.ScopesView>
    public typealias Iterator = Swift.IndexingIterator<Row.ScopesView>
    public typealias SubSequence = Swift.Slice<Row.ScopesView>
  }
}
extension Row {
  public struct ScopesTreeView {
    public var names: Swift.Set<Swift.String> {
      get
    }
    public subscript(name: Swift.String) -> Row? {
      get
    }
  }
}
extension Row {
  public struct PrefetchedRowsView : Swift.Equatable {
    public var isEmpty: Swift.Bool {
      get
    }
    public var keys: Swift.Set<Swift.String> {
      get
    }
    public subscript(key: Swift.String) -> [Row]? {
      get
    }
    public static func == (a: Row.PrefetchedRowsView, b: Row.PrefetchedRowsView) -> Swift.Bool
  }
}
public struct Configuration {
  public var foreignKeysEnabled: Swift.Bool
  public var readonly: Swift.Bool
  public var label: Swift.String?
  public var trace: TraceFunction?
  public var acceptsDoubleQuotedStringLiterals: Swift.Bool
  public var observesSuspensionNotifications: Swift.Bool
  public var prepareDatabase: ((Database) throws -> Swift.Void)?
  public var defaultTransactionKind: Database.TransactionKind
  public var allowsUnsafeTransactions: Swift.Bool
  public var busyMode: Database.BusyMode
  public var maximumReaderCount: Swift.Int
  public var qos: Dispatch.DispatchQoS
  public var targetQueue: Dispatch.DispatchQueue?
  public init()
}
public typealias TraceFunction = (Swift.String) -> Swift.Void
extension DatabaseValueConvertible where Self : Swift.RawRepresentable, Self.RawValue : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Self?
}
public protocol SQLExpression : SQLOrderingTerm, SQLSelectable, SQLSpecificExpressible {
  func expressionSQL(_ context: inout SQLGenerationContext, wrappedInParenthesis: Swift.Bool) -> Swift.String
  var negated: any SQLExpression { get }
  func matchedRowIds(rowIdName: Swift.String?) -> Swift.Set<Swift.Int64>?
  func qualifiedExpression(with alias: TableAlias) -> any SQLExpression
}
extension SQLExpression {
  public var negated: any SQLExpression {
    get
  }
  public func matchedRowIds(rowIdName: Swift.String?) -> Swift.Set<Swift.Int64>?
  public func qualifiedSelectable(with alias: TableAlias) -> any SQLSelectable
  public func qualifiedOrdering(with alias: TableAlias) -> any SQLOrderingTerm
}
extension SQLExpression {
  public var sqlExpression: any SQLExpression {
    get
  }
}
extension SQLExpression {
  public func count(distinct: Swift.Bool) -> SQLCount?
}
public enum ATOMReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class ATOMReachability {
  public typealias NetworkReachable = (ATOMReachability) -> ()
  public typealias NetworkUnreachable = (ATOMReachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: ATOMReachability.NetworkStatus, b: ATOMReachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: ATOMReachability.Connection
    public static func == (a: ATOMReachability.Connection, b: ATOMReachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: ATOMReachability.NetworkReachable?
  public var whenUnreachable: ATOMReachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: ATOMReachability.Connection {
    get
  }
  public var connection: ATOMReachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension ATOMReachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension ValueReducers {
  public struct Combine2<R1, R2> : ValueReducer where R1 : ValueReducer, R2 : ValueReducer {
    public typealias Fetched = (R1.Fetched, R2.Fetched)
    public typealias Value = (R1.Value, R2.Value)
    public func fetch(_ db: Database) throws -> ValueReducers.Combine2<R1, R2>.Fetched
    public mutating func value(_ fetched: ValueReducers.Combine2<R1, R2>.Fetched) -> ValueReducers.Combine2<R1, R2>.Value?
  }
}
extension ValueObservation where Reducer == () {
  public static func combine<R1, R2>(_ o1: ValueObservation<R1>, _ o2: ValueObservation<R2>) -> ValueObservation<ValueReducers.Combine2<R1, R2>> where R1 : ValueReducer, R2 : ValueReducer
}
extension ValueObservation where Reducer : ValueReducer {
  public func combine<R1, Combined>(_ other: ValueObservation<R1>, _ transform: @escaping (Reducer.Value, R1.Value) -> Combined) -> ValueObservation<ValueReducers.Map<ValueReducers.Combine2<Reducer, R1>, Combined>> where R1 : ValueReducer
}
extension ValueReducers {
  public struct Combine3<R1, R2, R3> : ValueReducer where R1 : ValueReducer, R2 : ValueReducer, R3 : ValueReducer {
    public typealias Fetched = (R1.Fetched, R2.Fetched, R3.Fetched)
    public typealias Value = (R1.Value, R2.Value, R3.Value)
    public func fetch(_ db: Database) throws -> ValueReducers.Combine3<R1, R2, R3>.Fetched
    public mutating func value(_ fetched: ValueReducers.Combine3<R1, R2, R3>.Fetched) -> ValueReducers.Combine3<R1, R2, R3>.Value?
  }
}
extension ValueObservation where Reducer == () {
  public static func combine<R1, R2, R3>(_ o1: ValueObservation<R1>, _ o2: ValueObservation<R2>, _ o3: ValueObservation<R3>) -> ValueObservation<ValueReducers.Combine3<R1, R2, R3>> where R1 : ValueReducer, R2 : ValueReducer, R3 : ValueReducer
}
extension ValueObservation where Reducer : ValueReducer {
  public func combine<R1, R2, Combined>(_ observation1: ValueObservation<R1>, _ observation2: ValueObservation<R2>, _ transform: @escaping (Reducer.Value, R1.Value, R2.Value) -> Combined) -> ValueObservation<ValueReducers.Map<ValueReducers.Combine3<Reducer, R1, R2>, Combined>> where R1 : ValueReducer, R2 : ValueReducer
}
extension ValueReducers {
  public struct Combine4<R1, R2, R3, R4> : ValueReducer where R1 : ValueReducer, R2 : ValueReducer, R3 : ValueReducer, R4 : ValueReducer {
    public typealias Fetched = (R1.Fetched, R2.Fetched, R3.Fetched, R4.Fetched)
    public typealias Value = (R1.Value, R2.Value, R3.Value, R4.Value)
    public func fetch(_ db: Database) throws -> ValueReducers.Combine4<R1, R2, R3, R4>.Fetched
    public mutating func value(_ fetched: ValueReducers.Combine4<R1, R2, R3, R4>.Fetched) -> ValueReducers.Combine4<R1, R2, R3, R4>.Value?
  }
}
extension ValueObservation where Reducer == () {
  public static func combine<R1, R2, R3, R4>(_ o1: ValueObservation<R1>, _ o2: ValueObservation<R2>, _ o3: ValueObservation<R3>, _ o4: ValueObservation<R4>) -> ValueObservation<ValueReducers.Combine4<R1, R2, R3, R4>> where R1 : ValueReducer, R2 : ValueReducer, R3 : ValueReducer, R4 : ValueReducer
}
extension ValueObservation where Reducer : ValueReducer {
  public func combine<R1, R2, R3, Combined>(_ observation1: ValueObservation<R1>, _ observation2: ValueObservation<R2>, _ observation3: ValueObservation<R3>, _ transform: @escaping (Reducer.Value, R1.Value, R2.Value, R3.Value) -> Combined) -> ValueObservation<ValueReducers.Map<ValueReducers.Combine4<Reducer, R1, R2, R3>, Combined>> where R1 : ValueReducer, R2 : ValueReducer, R3 : ValueReducer
}
extension ValueReducers {
  public struct Combine5<R1, R2, R3, R4, R5> : ValueReducer where R1 : ValueReducer, R2 : ValueReducer, R3 : ValueReducer, R4 : ValueReducer, R5 : ValueReducer {
    public typealias Fetched = (R1.Fetched, R2.Fetched, R3.Fetched, R4.Fetched, R5.Fetched)
    public typealias Value = (R1.Value, R2.Value, R3.Value, R4.Value, R5.Value)
    public func fetch(_ db: Database) throws -> ValueReducers.Combine5<R1, R2, R3, R4, R5>.Fetched
    public mutating func value(_ fetched: ValueReducers.Combine5<R1, R2, R3, R4, R5>.Fetched) -> ValueReducers.Combine5<R1, R2, R3, R4, R5>.Value?
  }
}
extension ValueObservation where Reducer == () {
  public static func combine<R1, R2, R3, R4, R5>(_ o1: ValueObservation<R1>, _ o2: ValueObservation<R2>, _ o3: ValueObservation<R3>, _ o4: ValueObservation<R4>, _ o5: ValueObservation<R5>) -> ValueObservation<ValueReducers.Combine5<R1, R2, R3, R4, R5>> where R1 : ValueReducer, R2 : ValueReducer, R3 : ValueReducer, R4 : ValueReducer, R5 : ValueReducer
}
extension ValueObservation where Reducer : ValueReducer {
  public func combine<R1, R2, R3, R4, Combined>(_ observation1: ValueObservation<R1>, _ observation2: ValueObservation<R2>, _ observation3: ValueObservation<R3>, _ observation4: ValueObservation<R4>, _ transform: @escaping (Reducer.Value, R1.Value, R2.Value, R3.Value, R4.Value) -> Combined) -> ValueObservation<ValueReducers.Map<ValueReducers.Combine5<Reducer, R1, R2, R3, R4>, Combined>> where R1 : ValueReducer, R2 : ValueReducer, R3 : ValueReducer, R4 : ValueReducer
}
extension ValueReducers {
  public struct Combine6<R1, R2, R3, R4, R5, R6> : ValueReducer where R1 : ValueReducer, R2 : ValueReducer, R3 : ValueReducer, R4 : ValueReducer, R5 : ValueReducer, R6 : ValueReducer {
    public typealias Fetched = (R1.Fetched, R2.Fetched, R3.Fetched, R4.Fetched, R5.Fetched, R6.Fetched)
    public typealias Value = (R1.Value, R2.Value, R3.Value, R4.Value, R5.Value, R6.Value)
    public func fetch(_ db: Database) throws -> ValueReducers.Combine6<R1, R2, R3, R4, R5, R6>.Fetched
    public mutating func value(_ fetched: ValueReducers.Combine6<R1, R2, R3, R4, R5, R6>.Fetched) -> ValueReducers.Combine6<R1, R2, R3, R4, R5, R6>.Value?
  }
}
extension ValueObservation where Reducer == () {
  public static func combine<R1, R2, R3, R4, R5, R6>(_ o1: ValueObservation<R1>, _ o2: ValueObservation<R2>, _ o3: ValueObservation<R3>, _ o4: ValueObservation<R4>, _ o5: ValueObservation<R5>, _ o6: ValueObservation<R6>) -> ValueObservation<ValueReducers.Combine6<R1, R2, R3, R4, R5, R6>> where R1 : ValueReducer, R2 : ValueReducer, R3 : ValueReducer, R4 : ValueReducer, R5 : ValueReducer, R6 : ValueReducer
}
extension ValueReducers {
  public struct Combine7<R1, R2, R3, R4, R5, R6, R7> : ValueReducer where R1 : ValueReducer, R2 : ValueReducer, R3 : ValueReducer, R4 : ValueReducer, R5 : ValueReducer, R6 : ValueReducer, R7 : ValueReducer {
    public typealias Fetched = (R1.Fetched, R2.Fetched, R3.Fetched, R4.Fetched, R5.Fetched, R6.Fetched, R7.Fetched)
    public typealias Value = (R1.Value, R2.Value, R3.Value, R4.Value, R5.Value, R6.Value, R7.Value)
    public func fetch(_ db: Database) throws -> ValueReducers.Combine7<R1, R2, R3, R4, R5, R6, R7>.Fetched
    public mutating func value(_ fetched: ValueReducers.Combine7<R1, R2, R3, R4, R5, R6, R7>.Fetched) -> ValueReducers.Combine7<R1, R2, R3, R4, R5, R6, R7>.Value?
  }
}
extension ValueObservation where Reducer == () {
  public static func combine<R1, R2, R3, R4, R5, R6, R7>(_ o1: ValueObservation<R1>, _ o2: ValueObservation<R2>, _ o3: ValueObservation<R3>, _ o4: ValueObservation<R4>, _ o5: ValueObservation<R5>, _ o6: ValueObservation<R6>, _ o7: ValueObservation<R7>) -> ValueObservation<ValueReducers.Combine7<R1, R2, R3, R4, R5, R6, R7>> where R1 : ValueReducer, R2 : ValueReducer, R3 : ValueReducer, R4 : ValueReducer, R5 : ValueReducer, R6 : ValueReducer, R7 : ValueReducer
}
extension ValueReducers {
  public struct Combine8<R1, R2, R3, R4, R5, R6, R7, R8> : ValueReducer where R1 : ValueReducer, R2 : ValueReducer, R3 : ValueReducer, R4 : ValueReducer, R5 : ValueReducer, R6 : ValueReducer, R7 : ValueReducer, R8 : ValueReducer {
    public typealias Fetched = (R1.Fetched, R2.Fetched, R3.Fetched, R4.Fetched, R5.Fetched, R6.Fetched, R7.Fetched, R8.Fetched)
    public typealias Value = (R1.Value, R2.Value, R3.Value, R4.Value, R5.Value, R6.Value, R7.Value, R8.Value)
    public func fetch(_ db: Database) throws -> ValueReducers.Combine8<R1, R2, R3, R4, R5, R6, R7, R8>.Fetched
    public mutating func value(_ fetched: ValueReducers.Combine8<R1, R2, R3, R4, R5, R6, R7, R8>.Fetched) -> ValueReducers.Combine8<R1, R2, R3, R4, R5, R6, R7, R8>.Value?
  }
}
extension ValueObservation where Reducer == () {
  public static func combine<R1, R2, R3, R4, R5, R6, R7, R8>(_ o1: ValueObservation<R1>, _ o2: ValueObservation<R2>, _ o3: ValueObservation<R3>, _ o4: ValueObservation<R4>, _ o5: ValueObservation<R5>, _ o6: ValueObservation<R6>, _ o7: ValueObservation<R7>, _ o8: ValueObservation<R8>) -> ValueObservation<ValueReducers.Combine8<R1, R2, R3, R4, R5, R6, R7, R8>> where R1 : ValueReducer, R2 : ValueReducer, R3 : ValueReducer, R4 : ValueReducer, R5 : ValueReducer, R6 : ValueReducer, R7 : ValueReducer, R8 : ValueReducer
}
public struct Inflections {
  public init()
  public mutating func plural(_ pattern: Swift.String, options: Foundation.NSRegularExpression.Options = [.caseInsensitive], _ template: Swift.String)
  public mutating func singular(_ pattern: Swift.String, options: Foundation.NSRegularExpression.Options = [.caseInsensitive], _ template: Swift.String)
  public mutating func uncountableWords(_ words: [Swift.String])
  public mutating func irregularSuffix(_ singular: Swift.String, _ plural: Swift.String)
  public func pluralize(_ string: Swift.String) -> Swift.String
  public func singularize(_ string: Swift.String) -> Swift.String
}
public struct FTS3Pattern {
  public let rawPattern: Swift.String
  public init(rawPattern: Swift.String) throws
  @available(macOS 10.10, *)
  public init?(matchingAnyTokenIn string: Swift.String)
  @available(macOS 10.10, *)
  public init?(matchingAllTokensIn string: Swift.String)
  @available(macOS 10.10, *)
  public init?(matchingPhrase string: Swift.String)
}
extension FTS3Pattern : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> FTS3Pattern?
}
extension QueryInterfaceRequest where T : TableRecord {
  public func annotated(with aggregates: AssociationAggregate<QueryInterfaceRequest<T>.RowDecoder>...) -> QueryInterfaceRequest<T>
  public func annotated(with aggregates: [AssociationAggregate<QueryInterfaceRequest<T>.RowDecoder>]) -> QueryInterfaceRequest<T>
  public func having(_ predicate: AssociationAggregate<QueryInterfaceRequest<T>.RowDecoder>) -> QueryInterfaceRequest<T>
}
extension Foundation.NSNumber : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Self?
}
extension Foundation.NSUUID : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Self?
}
extension Foundation.UUID : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Foundation.UUID?
}
extension Foundation.UUID : StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        switch sqlite3_column_type(sqliteStatement, index) {
        case SQLITE_TEXT:
            let string = String(cString: sqlite3_column_text(sqliteStatement, index)!)
            guard let uuid = UUID(uuidString: string) else {
                fatalConversionError(to: UUID.self, sqliteStatement: sqliteStatement, index: index)
            }
            self.init(uuid: uuid.uuid)
        case SQLITE_BLOB:
            guard sqlite3_column_bytes(sqliteStatement, index) == 16,
                let blob = sqlite3_column_blob(sqliteStatement, index) else
            {
                fatalConversionError(to: UUID.self, sqliteStatement: sqliteStatement, index: index)
            }
            self.init(uuid: blob.assumingMemoryBound(to: uuid_t.self).pointee)
        default:
            fatalConversionError(to: UUID.self, sqliteStatement: sqliteStatement, index: index)
        }
    }
}
extension Foundation.NSData : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Self?
}
public struct DatabaseDateComponents : DatabaseValueConvertible, StatementColumnConvertible, Swift.Codable {
  public enum Format : Swift.String {
    case YMD
    case YMD_HM
    case YMD_HMS
    case YMD_HMSS
    case HM
    case HMS
    case HMSS
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let dateComponents: Foundation.DateComponents
  public let format: DatabaseDateComponents.Format
  public init(_ dateComponents: Foundation.DateComponents, format: DatabaseDateComponents.Format)
  public init(sqliteStatement: SQLiteStatement, index: Swift.Int32)
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> DatabaseDateComponents?
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension TableRecord {
  public static func belongsTo<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: ForeignKey? = nil) -> BelongsToAssociation<Self, Destination> where Destination : TableRecord
  public static func hasMany<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: ForeignKey? = nil) -> HasManyAssociation<Self, Destination> where Destination : TableRecord
  public static func hasMany<Pivot, Target>(_ destination: Target.RowDecoder.Type, through pivot: Pivot, using target: Target, key: Swift.String? = nil) -> HasManyThroughAssociation<Self, Target.RowDecoder> where Self == Pivot.OriginRowDecoder, Pivot : Association, Target : Association, Pivot.RowDecoder == Target.OriginRowDecoder
  public static func hasOne<Destination>(_ destination: Destination.Type, key: Swift.String? = nil, using foreignKey: ForeignKey? = nil) -> HasOneAssociation<Self, Destination> where Destination : TableRecord
  public static func hasOne<Pivot, Target>(_ destination: Target.RowDecoder.Type, through pivot: Pivot, using target: Target, key: Swift.String? = nil) -> HasOneThroughAssociation<Self, Target.RowDecoder> where Self == Pivot.OriginRowDecoder, Pivot : AssociationToOne, Target : AssociationToOne, Pivot.RowDecoder == Target.OriginRowDecoder
}
public struct ForeignKey {
  public init(_ originColumns: [Swift.String], to destinationColumns: [Swift.String]? = nil)
  public init(_ originColumns: [any ColumnExpression], to destinationColumns: [any ColumnExpression]? = nil)
}
extension TableRecord where Self : EncodableRecord {
  public func request<A>(for association: A) -> QueryInterfaceRequest<A.RowDecoder> where Self == A.OriginRowDecoder, A : Association
}
extension TableRecord {
  public static func including<A>(all association: A) -> QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : AssociationToMany
  public static func including<A>(optional association: A) -> QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : Association
  public static func including<A>(required association: A) -> QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : Association
  public static func joining<A>(optional association: A) -> QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : Association
  public static func joining<A>(required association: A) -> QueryInterfaceRequest<Self> where Self == A.OriginRowDecoder, A : Association
  public static func annotated(with aggregates: AssociationAggregate<Self>...) -> QueryInterfaceRequest<Self>
  public static func annotated(with aggregates: [AssociationAggregate<Self>]) -> QueryInterfaceRequest<Self>
  public static func having(_ predicate: AssociationAggregate<Self>) -> QueryInterfaceRequest<Self>
}
extension Swift.Bool : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        self = sqlite3_column_int64(sqliteStatement, index) != 0
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Swift.Bool?
}
extension Swift.Int : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        if let v = Int(exactly: int64) {
            self = v
        } else {
            fatalConversionError(to: Int.self, sqliteStatement: sqliteStatement, index: index)
        }
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Swift.Int?
}
extension Swift.Int8 : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        if let v = Int8(exactly: int64) {
            self = v
        } else {
            fatalConversionError(to: Int8.self, sqliteStatement: sqliteStatement, index: index)
        }
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Swift.Int8?
}
extension Swift.Int16 : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        if let v = Int16(exactly: int64) {
            self = v
        } else {
            fatalConversionError(to: Int16.self, sqliteStatement: sqliteStatement, index: index)
        }
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Swift.Int16?
}
extension Swift.Int32 : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        if let v = Int32(exactly: int64) {
            self = v
        } else {
            fatalConversionError(to: Int32.self, sqliteStatement: sqliteStatement, index: index)
        }
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Swift.Int32?
}
extension Swift.Int64 : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        self = sqlite3_column_int64(sqliteStatement, index)
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Swift.Int64?
}
extension Swift.UInt : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        if let v = UInt(exactly: int64) {
            self = v
        } else {
            fatalConversionError(to: UInt.self, sqliteStatement: sqliteStatement, index: index)
        }
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Swift.UInt?
}
extension Swift.UInt8 : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        if let v = UInt8(exactly: int64) {
            self = v
        } else {
            fatalConversionError(to: UInt8.self, sqliteStatement: sqliteStatement, index: index)
        }
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Swift.UInt8?
}
extension Swift.UInt16 : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        if let v = UInt16(exactly: int64) {
            self = v
        } else {
            fatalConversionError(to: UInt16.self, sqliteStatement: sqliteStatement, index: index)
        }
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Swift.UInt16?
}
extension Swift.UInt32 : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        if let v = UInt32(exactly: int64) {
            self = v
        } else {
            fatalConversionError(to: UInt32.self, sqliteStatement: sqliteStatement, index: index)
        }
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Swift.UInt32?
}
extension Swift.UInt64 : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        let int64 = sqlite3_column_int64(sqliteStatement, index)
        if let v = UInt64(exactly: int64) {
            self = v
        } else {
            fatalConversionError(to: UInt64.self, sqliteStatement: sqliteStatement, index: index)
        }
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Swift.UInt64?
}
extension Swift.Double : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        self = sqlite3_column_double(sqliteStatement, index)
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Swift.Double?
}
extension Swift.Float : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        self = Float(sqlite3_column_double(sqliteStatement, index))
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Swift.Float?
}
extension Swift.String : DatabaseValueConvertible, StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        self = String(cString: sqlite3_column_text(sqliteStatement, index)!)
    }
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Swift.String?
}
extension DatabaseFunction {
  public static let capitalize: DatabaseFunction
  public static let lowercase: DatabaseFunction
  public static let uppercase: DatabaseFunction
}
extension DatabaseFunction {
  @available(iOS 9.0, macOS 10.11, watchOS 3.0, *)
  public static let localizedCapitalize: DatabaseFunction
  @available(iOS 9.0, macOS 10.11, watchOS 3.0, *)
  public static let localizedLowercase: DatabaseFunction
  @available(iOS 9.0, macOS 10.11, watchOS 3.0, *)
  public static let localizedUppercase: DatabaseFunction
}
extension DatabaseCollation {
  public static let unicodeCompare: DatabaseCollation
  public static let caseInsensitiveCompare: DatabaseCollation
  public static let localizedCaseInsensitiveCompare: DatabaseCollation
  public static let localizedCompare: DatabaseCollation
  public static let localizedStandardCompare: DatabaseCollation
}
public struct AllColumns {
  public init()
}
extension AllColumns : SQLSelectable {
  public func resultColumnSQL(_ context: inout SQLGenerationContext) -> Swift.String
  public func countedSQL(_ context: inout SQLGenerationContext) -> Swift.String
  public func count(distinct: Swift.Bool) -> SQLCount?
  public func qualifiedSelectable(with alias: TableAlias) -> any SQLSelectable
  public func columnCount(_ db: Database) throws -> Swift.Int
}
@usableFromInline
internal func fatalConversionError<T>(to: T.Type, from dbValue: DatabaseValue?, in row: Row, atColumn columnName: Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> Swift.Never
@usableFromInline
internal func fatalConversionError<T>(to: T.Type, sqliteStatement: SQLiteStatement, index: Swift.Int32, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> Swift.Never
@usableFromInline
internal func fatalConversionError<T>(to: T.Type, from dbValue: DatabaseValue?, sqliteStatement: SQLiteStatement, index: Swift.Int32, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> Swift.Never
extension DatabaseValueConvertible {
  @usableFromInline
  internal static func decode(from sqliteStatement: SQLiteStatement, atUncheckedIndex index: Swift.Int32) -> Self
  @usableFromInline
  internal static func decode(from row: Row, atUncheckedIndex index: Swift.Int) -> Self
  @usableFromInline
  internal static func decodeIfPresent(from sqliteStatement: SQLiteStatement, atUncheckedIndex index: Swift.Int32) -> Self?
  @usableFromInline
  internal static func decodeIfPresent(from row: Row, atUncheckedIndex index: Swift.Int) -> Self?
}
extension DatabaseValueConvertible where Self : StatementColumnConvertible {
  @inlinable internal static func fastDecode(from sqliteStatement: SQLiteStatement, atUncheckedIndex index: Swift.Int32) -> Self {
        if sqlite3_column_type(sqliteStatement, index) == SQLITE_NULL {
            fatalConversionError(to: Self.self, sqliteStatement: sqliteStatement, index: index)
        }
        return self.init(sqliteStatement: sqliteStatement, index: index)
    }
  @inlinable internal static func fastDecode(from row: Row, atUncheckedIndex index: Swift.Int) -> Self {
        if let sqliteStatement = row.sqliteStatement {
            return fastDecode(from: sqliteStatement, atUncheckedIndex: Int32(index))
        }
        return row.fastDecode(Self.self, atUncheckedIndex: index)
    }
  @inlinable internal static func fastDecodeIfPresent(from sqliteStatement: SQLiteStatement, atUncheckedIndex index: Swift.Int32) -> Self? {
        if sqlite3_column_type(sqliteStatement, index) == SQLITE_NULL {
            return nil
        }
        return self.init(sqliteStatement: sqliteStatement, index: index)
    }
  @inlinable internal static func fastDecodeIfPresent(from row: Row, atUncheckedIndex index: Swift.Int) -> Self? {
        if let sqliteStatement = row.sqliteStatement {
            return fastDecodeIfPresent(from: sqliteStatement, atUncheckedIndex: Int32(index))
        }
        return row.fastDecodeIfPresent(Self.self, atUncheckedIndex: index)
    }
}
extension Row {
  @usableFromInline
  final internal func fastDecode<Value>(_ type: Value.Type, atUncheckedIndex index: Swift.Int) -> Value where Value : DatabaseValueConvertible, Value : StatementColumnConvertible
  @usableFromInline
  final internal func fastDecodeIfPresent<Value>(_ type: Value.Type, atUncheckedIndex index: Swift.Int) -> Value? where Value : DatabaseValueConvertible, Value : StatementColumnConvertible
}
public func == (lhs: any SQLSpecificExpressible, rhs: (any SQLExpressible)?) -> any SQLExpression
public func == (lhs: SQLCollatedExpression, rhs: (any SQLExpressible)?) -> any SQLExpression
public func == (lhs: any SQLSpecificExpressible, rhs: Swift.Bool) -> any SQLExpression
public func == (lhs: (any SQLExpressible)?, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func == (lhs: (any SQLExpressible)?, rhs: SQLCollatedExpression) -> any SQLExpression
public func == (lhs: Swift.Bool, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func == (lhs: any SQLSpecificExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func != (lhs: any SQLSpecificExpressible, rhs: (any SQLExpressible)?) -> any SQLExpression
public func != (lhs: SQLCollatedExpression, rhs: (any SQLExpressible)?) -> any SQLExpression
public func != (lhs: any SQLSpecificExpressible, rhs: Swift.Bool) -> any SQLExpression
public func != (lhs: (any SQLExpressible)?, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func != (lhs: (any SQLExpressible)?, rhs: SQLCollatedExpression) -> any SQLExpression
public func != (lhs: Swift.Bool, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func != (lhs: any SQLSpecificExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func === (lhs: any SQLSpecificExpressible, rhs: (any SQLExpressible)?) -> any SQLExpression
public func === (lhs: SQLCollatedExpression, rhs: (any SQLExpressible)?) -> any SQLExpression
public func === (lhs: (any SQLExpressible)?, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func === (lhs: (any SQLExpressible)?, rhs: SQLCollatedExpression) -> any SQLExpression
public func === (lhs: any SQLSpecificExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func !== (lhs: any SQLSpecificExpressible, rhs: (any SQLExpressible)?) -> any SQLExpression
public func !== (lhs: SQLCollatedExpression, rhs: (any SQLExpressible)?) -> any SQLExpression
public func !== (lhs: (any SQLExpressible)?, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func !== (lhs: (any SQLExpressible)?, rhs: SQLCollatedExpression) -> any SQLExpression
public func !== (lhs: any SQLSpecificExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func < (lhs: any SQLSpecificExpressible, rhs: any SQLExpressible) -> any SQLExpression
public func < (lhs: SQLCollatedExpression, rhs: any SQLExpressible) -> any SQLExpression
public func < (lhs: any SQLExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func < (lhs: any SQLExpressible, rhs: SQLCollatedExpression) -> any SQLExpression
public func < (lhs: any SQLSpecificExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func <= (lhs: any SQLSpecificExpressible, rhs: any SQLExpressible) -> any SQLExpression
public func <= (lhs: SQLCollatedExpression, rhs: any SQLExpressible) -> any SQLExpression
public func <= (lhs: any SQLExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func <= (lhs: any SQLExpressible, rhs: SQLCollatedExpression) -> any SQLExpression
public func <= (lhs: any SQLSpecificExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func > (lhs: any SQLSpecificExpressible, rhs: any SQLExpressible) -> any SQLExpression
public func > (lhs: SQLCollatedExpression, rhs: any SQLExpressible) -> any SQLExpression
public func > (lhs: any SQLExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func > (lhs: any SQLExpressible, rhs: SQLCollatedExpression) -> any SQLExpression
public func > (lhs: any SQLSpecificExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func >= (lhs: any SQLSpecificExpressible, rhs: any SQLExpressible) -> any SQLExpression
public func >= (lhs: SQLCollatedExpression, rhs: any SQLExpressible) -> any SQLExpression
public func >= (lhs: any SQLExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func >= (lhs: any SQLExpressible, rhs: SQLCollatedExpression) -> any SQLExpression
public func >= (lhs: any SQLSpecificExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
extension Swift.Range where Bound : SQLExpressible {
  public func contains(_ element: any SQLSpecificExpressible) -> any SQLExpression
  public func contains(_ element: SQLCollatedExpression) -> any SQLExpression
}
extension Swift.ClosedRange where Bound : SQLExpressible {
  public func contains(_ element: any SQLSpecificExpressible) -> any SQLExpression
  public func contains(_ element: SQLCollatedExpression) -> any SQLExpression
}
extension Swift.CountableRange where Bound : SQLExpressible, Bound : Swift.Strideable, Bound.Stride : Swift.SignedInteger {
  public func contains(_ element: any SQLSpecificExpressible) -> any SQLExpression
}
extension Swift.CountableClosedRange where Bound : SQLExpressible, Bound : Swift.Strideable, Bound.Stride : Swift.SignedInteger {
  public func contains(_ element: any SQLSpecificExpressible) -> any SQLExpression
}
extension Swift.Sequence where Self.Element : SQLExpressible {
  public func contains(_ element: any SQLSpecificExpressible) -> any SQLExpression
  public func contains(_ element: SQLCollatedExpression) -> any SQLExpression
}
extension SQLAssociativeBinaryOperator {
  public static let add: SQLAssociativeBinaryOperator
  public static let multiply: SQLAssociativeBinaryOperator
}
public func * (lhs: any SQLSpecificExpressible, rhs: any SQLExpressible) -> any SQLExpression
public func * (lhs: any SQLExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func * (lhs: any SQLSpecificExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func / (lhs: any SQLSpecificExpressible, rhs: any SQLExpressible) -> any SQLExpression
public func / (lhs: any SQLExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func / (lhs: any SQLSpecificExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func + (lhs: any SQLSpecificExpressible, rhs: any SQLExpressible) -> any SQLExpression
public func + (lhs: any SQLExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func + (lhs: any SQLSpecificExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
prefix public func - (value: any SQLSpecificExpressible) -> any SQLExpression
public func - (lhs: any SQLSpecificExpressible, rhs: any SQLExpressible) -> any SQLExpression
public func - (lhs: any SQLExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func - (lhs: any SQLSpecificExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
extension SQLAssociativeBinaryOperator {
  public static let and: SQLAssociativeBinaryOperator
  public static let or: SQLAssociativeBinaryOperator
}
public func && (lhs: any SQLSpecificExpressible, rhs: any SQLExpressible) -> any SQLExpression
public func && (lhs: any SQLExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func && (lhs: any SQLSpecificExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func || (lhs: any SQLSpecificExpressible, rhs: any SQLExpressible) -> any SQLExpression
public func || (lhs: any SQLExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
public func || (lhs: any SQLSpecificExpressible, rhs: any SQLSpecificExpressible) -> any SQLExpression
prefix public func ! (value: any SQLSpecificExpressible) -> any SQLExpression
extension SQLSpecificExpressible {
  public func like(_ pattern: any SQLExpressible) -> any SQLExpression
}
extension SQLAssociativeBinaryOperator {
  public static let concat: SQLAssociativeBinaryOperator
}
public struct SwipeDataPoint {
}
extension Foundation.NSNull : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Self?
}
public protocol SQLExpressible {
  var sqlExpression: any SQLExpression { get }
}
public protocol SQLSpecificExpressible : SQLExpressible {
}
extension SQLExpressible where Self : SQLOrderingTerm {
  public var reversed: any SQLOrderingTerm {
    get
  }
  public func orderingTermSQL(_ context: inout SQLGenerationContext) -> Swift.String
}
extension SQLExpressible where Self : SQLSelectable {
  public func resultColumnSQL(_ context: inout SQLGenerationContext) -> Swift.String
  public func countedSQL(_ context: inout SQLGenerationContext) -> Swift.String
  public func count(distinct: Swift.Bool) -> SQLCount?
  public func columnCount(_ db: Database) throws -> Swift.Int
}
extension DatabaseFunction {
  final public func apply(_ arguments: any SQLExpressible...) -> any SQLExpression
}
extension SQLFunctionName {
  public static let abs: SQLFunctionName
}
public func abs(_ value: any SQLSpecificExpressible) -> any SQLExpression
extension SQLFunctionName {
  public static let avg: SQLFunctionName
}
public func average(_ value: any SQLSpecificExpressible) -> any SQLExpression
public func count(_ counted: any SQLSelectable) -> any SQLExpression
public func count(distinct value: any SQLSpecificExpressible) -> any SQLExpression
extension SQLFunctionName {
  public static let ifNull: SQLFunctionName
}
public func ?? (lhs: any SQLSpecificExpressible, rhs: any SQLExpressible) -> any SQLExpression
extension SQLFunctionName {
  public static let length: SQLFunctionName
}
public func length(_ value: any SQLSpecificExpressible) -> any SQLExpression
extension SQLFunctionName {
  public static let max: SQLFunctionName
}
public func max(_ value: any SQLSpecificExpressible) -> any SQLExpression
extension SQLFunctionName {
  public static let min: SQLFunctionName
}
public func min(_ value: any SQLSpecificExpressible) -> any SQLExpression
extension SQLFunctionName {
  public static let sum: SQLFunctionName
}
public func sum(_ value: any SQLSpecificExpressible) -> any SQLExpression
extension SQLSpecificExpressible {
  public var capitalized: any SQLExpression {
    get
  }
  public var lowercased: any SQLExpression {
    get
  }
  public var uppercased: any SQLExpression {
    get
  }
}
extension SQLSpecificExpressible {
  @available(iOS 9.0, macOS 10.11, watchOS 3.0, *)
  public var localizedCapitalized: any SQLExpression {
    get
  }
  @available(iOS 9.0, macOS 10.11, watchOS 3.0, *)
  public var localizedLowercased: any SQLExpression {
    get
  }
  @available(iOS 9.0, macOS 10.11, watchOS 3.0, *)
  public var localizedUppercased: any SQLExpression {
    get
  }
}
extension Cursor {
  @available(*, unavailable, renamed: "compactMap")
  public func flatMap<ElementOfResult>(_ transform: @escaping (Self.Element) throws -> ElementOfResult?) -> MapCursor<FilterCursor<MapCursor<Self, ElementOfResult?>>, ElementOfResult>
}
extension DatabaseWriter {
  @available(*, unavailable, message: "Use concurrentRead instead")
  public func readFromCurrentState(_ block: @escaping (Database) -> Swift.Void) throws
}
extension ValueObservation {
  @available(*, unavailable, message: "Provide the reducer in a (Database) -> Reducer closure")
  public static func tracking(_ regions: any DatabaseRegionConvertible..., reducer: Reducer) -> ValueObservation<Reducer>
  @available(*, unavailable, message: "Use removeDuplicates() instead")
  public static func tracking<Value>(_ regions: any DatabaseRegionConvertible..., fetchDistinct fetch: @escaping (Database) throws -> Value) -> ValueObservation<ValueReducers.RemoveDuplicates<ValueReducers.Fetch<Value>>> where Value : Swift.Equatable
}
@available(*, unavailable, renamed: "FastDatabaseValueCursor")
public typealias ColumnCursor<Value> = FastDatabaseValueCursor<Value> where Value : DatabaseValueConvertible, Value : StatementColumnConvertible
@available(*, unavailable, renamed: "FastNullableDatabaseValueCursor")
public typealias NullableColumnCursor<Value> = FastNullableDatabaseValueCursor<Value> where Value : DatabaseValueConvertible, Value : StatementColumnConvertible
extension Database {
  @available(*, unavailable, renamed: "execute(sql:arguments:)")
  final public func execute(_ sql: Swift.String, arguments: StatementArguments? = nil) throws
  @available(*, unavailable, renamed: "makeSelectStatement(sql:)")
  final public func makeSelectStatement(_ sql: Swift.String) throws -> SelectStatement
  @available(*, unavailable, renamed: "cachedSelectStatement(sql:)")
  final public func cachedSelectStatement(_ sql: Swift.String) throws -> SelectStatement
  @available(*, unavailable, renamed: "makeUpdateStatement(sql:)")
  final public func makeUpdateStatement(_ sql: Swift.String) throws -> UpdateStatement
  @available(*, unavailable, renamed: "cachedUpdateStatement(sql:)")
  final public func cachedUpdateStatement(_ sql: Swift.String) throws -> UpdateStatement
}
extension DatabaseValueConvertible {
  @available(*, unavailable, renamed: "fetchCursor(_:sql:arguments:adapter:)")
  public static func fetchCursor(_ db: Database, _ sql: Swift.String, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> DatabaseValueCursor<Self>
  @available(*, unavailable, renamed: "fetchAll(_:sql:arguments:adapter:)")
  public static func fetchAll(_ db: Database, _ sql: Swift.String, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> [Self]
  @available(*, unavailable, renamed: "fetchOne(_:sql:arguments:adapter:)")
  public static func fetchOne(_ db: Database, _ sql: Swift.String, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> Self?
}
extension Swift.Optional where Wrapped : DatabaseValueConvertible {
  @available(*, unavailable, renamed: "fetchCursor(_:sql:arguments:adapter:)")
  public static func fetchCursor(_ db: Database, _ sql: Swift.String, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> NullableDatabaseValueCursor<Wrapped>
  @available(*, unavailable, renamed: "fetchAll(_:sql:arguments:adapter:)")
  public static func fetchAll(_ db: Database, _ sql: Swift.String, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> [Wrapped?]
}
extension Row {
  @available(*, unavailable, renamed: "fetchCursor(_:sql:arguments:adapter:)")
  public static func fetchCursor(_ db: Database, _ sql: Swift.String, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> RowCursor
  @available(*, unavailable, renamed: "fetchAll(_:sql:arguments:adapter:)")
  public static func fetchAll(_ db: Database, _ sql: Swift.String, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> [Row]
  @available(*, unavailable, renamed: "fetchOne(_:sql:arguments:adapter:)")
  public static func fetchOne(_ db: Database, _ sql: Swift.String, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> Row?
}
extension DatabaseValueConvertible where Self : StatementColumnConvertible {
  @available(*, unavailable, renamed: "fetchCursor(_:sql:arguments:adapter:)")
  public static func fetchCursor(_ db: Database, _ sql: Swift.String, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> FastDatabaseValueCursor<Self>
}
extension Swift.Optional where Wrapped : DatabaseValueConvertible, Wrapped : StatementColumnConvertible {
  @available(*, unavailable, renamed: "fetchCursor(_:sql:arguments:adapter:)")
  public static func fetchCursor(_ db: Database, _ sql: Swift.String, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> FastNullableDatabaseValueCursor<Wrapped>
}
extension FetchableRecord {
  @available(*, unavailable, renamed: "fetchCursor(_:sql:arguments:adapter:)")
  public static func fetchCursor(_ db: Database, _ sql: Swift.String, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> RecordCursor<Self>
  @available(*, unavailable, renamed: "fetchAll(_:sql:arguments:adapter:)")
  public static func fetchAll(_ db: Database, _ sql: Swift.String, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> [Self]
  @available(*, unavailable, renamed: "fetchOne(_:sql:arguments:adapter:)")
  public static func fetchOne(_ db: Database, _ sql: Swift.String, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> Self?
}
extension SQLRequest {
  @available(*, unavailable, renamed: "init(sql:arguments:adapter:cached:)")
  public init(_ sql: Swift.String, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil, cached: Swift.Bool = false)
}
extension SQLExpressionLiteral {
  @available(*, unavailable, renamed: "init(sql:arguments:)")
  public init(_ sql: Swift.String, arguments: StatementArguments? = nil)
}
extension SQLExpression {
  @available(*, unavailable, message: "Use sqlLiteral property instead")
  public var literal: SQLExpressionLiteral {
    get
  }
}
extension FTS3TokenizerDescriptor {
  @available(*, unavailable, renamed: "unicode61(diacritics:separators:tokenCharacters:)")
  public static func unicode61(removeDiacritics: Swift.Bool, separators: Swift.Set<Swift.Character> = [], tokenCharacters: Swift.Set<Swift.Character> = []) -> FTS3TokenizerDescriptor
}
extension DatabaseValue {
  @available(*, unavailable)
  public func losslessConvert<T>(sql: Swift.String? = nil, arguments: StatementArguments? = nil) -> T where T : DatabaseValueConvertible
  @available(*, unavailable)
  public func losslessConvert<T>(sql: Swift.String? = nil, arguments: StatementArguments? = nil) -> T? where T : DatabaseValueConvertible
}
extension ValueScheduling {
  @available(*, unavailable, renamed: "async(onQueue:startImmediately:)")
  public static func onQueue(_ queue: Dispatch.DispatchQueue, startImmediately: Swift.Bool) -> ValueScheduling
}
extension ValueObservation {
  @available(*, unavailable, message: "Observation extent is controlled by the lifetime of observers returned by the start() method.")
  public var extent: Database.TransactionObservationExtent {
    get
    set
  }
}
extension Configuration {
  @available(*, unavailable, message: "Run the PRAGMA cipher_page_size in Configuration.prepareDatabase instead.")
  public var cipherPageSize: Swift.Int {
    get
    set
  }
  @available(*, unavailable, message: "Run the PRAGMA kdf_iter in Configuration.prepareDatabase instead.")
  public var kdfIterations: Swift.Int {
    get
    set
  }
}
@_hasMissingDesignatedInitializers @objc final public class ATOMEvent : ObjectiveC.NSObject {
  @objc deinit
}
extension ATOMEvent {
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var hash: Swift.Int {
    @objc get
  }
}
extension ATOMEvent {
  final public func name() -> Swift.String
  final public func value() -> Any?
  final public func timestamp() -> Swift.Int
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class TouchView : UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) final public var config: TouchConfiguration {
    get
    set(value)
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol ValueReducer {
  associatedtype Fetched
  associatedtype Value
  func fetch(_ db: Database) throws -> Self.Fetched
  mutating func value(_ fetched: Self.Fetched) -> Self.Value?
}
public struct AnyValueReducer<Fetched, Value> : ValueReducer {
  public init(fetch: @escaping (Database) throws -> Fetched, value: @escaping (Fetched) -> Value?)
  public init<Base>(_ reducer: Base) where Fetched == Base.Fetched, Value == Base.Value, Base : ValueReducer
  public func fetch(_ db: Database) throws -> Fetched
  public func value(_ fetched: Fetched) -> Value?
}
public enum ValueReducers {
}
final public class DatabaseCollation {
  final public let name: Swift.String
  public init(_ name: Swift.String, function: @escaping (Swift.String, Swift.String) -> Foundation.ComparisonResult)
  @objc deinit
}
extension DatabaseCollation : Swift.Hashable {
  final public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: DatabaseCollation, rhs: DatabaseCollation) -> Swift.Bool
  final public var hashValue: Swift.Int {
    get
  }
}
extension Inflections {
  public static var `default`: Inflections
}
public struct SQLRequest<T> : FetchRequest {
  public typealias RowDecoder = T
  public var sql: Swift.String {
    get
  }
  public var arguments: StatementArguments {
    get
  }
  public var adapter: (any RowAdapter)?
  public init(sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil, cached: Swift.Bool = false)
  public init(literal sqlLiteral: SQLLiteral, adapter: (any RowAdapter)? = nil, cached: Swift.Bool = false)
  public init<Request>(_ db: Database, request: Request, cached: Swift.Bool = false) throws where T == Request.RowDecoder, Request : FetchRequest
  public func makePreparedRequest(_ db: Database, forSingleResult singleResult: Swift.Bool) throws -> PreparedRequest
}
extension SQLRequest : Swift.ExpressibleByStringInterpolation {
  public init(unicodeScalarLiteral: Swift.String)
  public init(extendedGraphemeClusterLiteral: Swift.String)
  public init(stringLiteral: Swift.String)
  public init(stringInterpolation sqlInterpolation: SQLInterpolation)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringInterpolation = SQLInterpolation
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension DatabaseValueConvertible where Self : Swift.Decodable {
  public static func fromDatabaseValue(_ databaseValue: DatabaseValue) -> Self?
}
extension DatabaseValueConvertible where Self : Swift.Decodable, Self : Swift.RawRepresentable, Self.RawValue : DatabaseValueConvertible {
  public static func fromDatabaseValue(_ databaseValue: DatabaseValue) -> Self?
}
public struct PinchDataPoint {
}
public struct QueryInterfaceRequest<T> {
}
extension QueryInterfaceRequest : FetchRequest {
  public typealias RowDecoder = T
  public func makePreparedRequest(_ db: Database, forSingleResult singleResult: Swift.Bool) throws -> PreparedRequest
  public func fetchCount(_ db: Database) throws -> Swift.Int
  public func databaseRegion(_ db: Database) throws -> DatabaseRegion
}
extension QueryInterfaceRequest : SelectionRequest {
  public func select(_ selection: [any SQLSelectable]) -> QueryInterfaceRequest<T>
  public func select<RowDecoder>(_ selection: [any SQLSelectable], as type: RowDecoder.Type = RowDecoder.self) -> QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(_ selection: any SQLSelectable..., as type: RowDecoder.Type = RowDecoder.self) -> QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(sql: Swift.String, arguments: StatementArguments = StatementArguments(), as type: RowDecoder.Type = RowDecoder.self) -> QueryInterfaceRequest<RowDecoder>
  public func select<RowDecoder>(literal sqlLiteral: SQLLiteral, as type: RowDecoder.Type = RowDecoder.self) -> QueryInterfaceRequest<RowDecoder>
  public func annotated(with selection: [any SQLSelectable]) -> QueryInterfaceRequest<T>
}
extension QueryInterfaceRequest : FilteredRequest {
  public func filter(_ predicate: @escaping (Database) throws -> any SQLExpressible) -> QueryInterfaceRequest<T>
}
extension QueryInterfaceRequest : OrderedRequest {
  public func order(_ orderings: @escaping (Database) throws -> [any SQLOrderingTerm]) -> QueryInterfaceRequest<T>
  public func reversed() -> QueryInterfaceRequest<T>
  public func unordered() -> QueryInterfaceRequest<T>
}
extension QueryInterfaceRequest : AggregatingRequest {
  public func group(_ expressions: @escaping (Database) throws -> [any SQLExpressible]) -> QueryInterfaceRequest<T>
  public func having(_ predicate: any SQLExpressible) -> QueryInterfaceRequest<T>
}
extension QueryInterfaceRequest : _JoinableRequest {
  public func _including(all association: SQLAssociation) -> QueryInterfaceRequest<T>
  public func _including(optional association: SQLAssociation) -> QueryInterfaceRequest<T>
  public func _including(required association: SQLAssociation) -> QueryInterfaceRequest<T>
  public func _joining(optional association: SQLAssociation) -> QueryInterfaceRequest<T>
  public func _joining(required association: SQLAssociation) -> QueryInterfaceRequest<T>
}
extension QueryInterfaceRequest : JoinableRequest where T : TableRecord {
}
extension QueryInterfaceRequest {
  public func distinct() -> QueryInterfaceRequest<T>
  public func expectingSingleResult() -> QueryInterfaceRequest<T>
  public func limit(_ limit: Swift.Int, offset: Swift.Int? = nil) -> QueryInterfaceRequest<T>
  public func aliased(_ alias: TableAlias) -> QueryInterfaceRequest<T>
  public func asRequest<RowDecoder>(of type: RowDecoder.Type) -> QueryInterfaceRequest<RowDecoder>
}
extension QueryInterfaceRequest : TableRequest {
  public var databaseTableName: Swift.String {
    get
  }
}
extension QueryInterfaceRequest : DerivableRequest where T : TableRecord {
}
extension QueryInterfaceRequest where T : MutablePersistableRecord {
  @discardableResult
  public func deleteAll(_ db: Database) throws -> Swift.Int
  @discardableResult
  public func updateAll(_ db: Database, onConflict conflictResolution: Database.ConflictResolution? = nil, _ assignments: [ColumnAssignment]) throws -> Swift.Int
  @discardableResult
  public func updateAll(_ db: Database, onConflict conflictResolution: Database.ConflictResolution? = nil, _ assignment: ColumnAssignment, _ otherAssignments: ColumnAssignment...) throws -> Swift.Int
}
public struct ColumnAssignment {
}
precedencegroup ColumnAssignment {
  associativity: left
  assignment: true
  lowerThan: AssignmentPrecedence
}
infix operator <- : ColumnAssignment
@available(*, deprecated, message: "Use column.set(to: value) instead")
public func <- (column: any ColumnExpression, value: (any SQLExpressible)?) -> ColumnAssignment
extension ColumnExpression {
  public func set(to value: (any SQLExpressible)?) -> ColumnAssignment
}
public func += (column: any ColumnExpression, value: any SQLExpressible) -> ColumnAssignment
public func -= (column: any ColumnExpression, value: any SQLExpressible) -> ColumnAssignment
public func *= (column: any ColumnExpression, value: any SQLExpressible) -> ColumnAssignment
public func /= (column: any ColumnExpression, value: any SQLExpressible) -> ColumnAssignment
extension Database {
  final public func clearSchemaCache()
  final public func tableExists(_ name: Swift.String) throws -> Swift.Bool
  final public func isSQLiteInternalTable(_ tableName: Swift.String) -> Swift.Bool
  final public func isGRDBInternalTable(_ tableName: Swift.String) -> Swift.Bool
  final public func viewExists(_ name: Swift.String) throws -> Swift.Bool
  final public func triggerExists(_ name: Swift.String) throws -> Swift.Bool
  final public func primaryKey(_ tableName: Swift.String) throws -> PrimaryKeyInfo
  final public func indexes(on tableName: Swift.String) throws -> [IndexInfo]
  final public func table<T>(_ tableName: Swift.String, hasUniqueKey columns: T) throws -> Swift.Bool where T : Swift.Sequence, T.Element == Swift.String
  final public func foreignKeys(on tableName: Swift.String) throws -> [ForeignKeyInfo]
}
extension Database {
  final public func columns(in tableName: Swift.String) throws -> [ColumnInfo]
}
public struct ColumnInfo : FetchableRecord {
  public let name: Swift.String
  public let type: Swift.String
  public let isNotNull: Swift.Bool
  public let defaultValueSQL: Swift.String?
  public let primaryKeyIndex: Swift.Int
  public init(row: Row)
}
public struct IndexInfo {
  public let name: Swift.String
  public let columns: [Swift.String]
  public let isUnique: Swift.Bool
}
public struct PrimaryKeyInfo {
  public var columns: [Swift.String] {
    get
  }
  public var rowIDColumn: Swift.String? {
    get
  }
  public var isRowID: Swift.Bool {
    get
  }
}
public struct ForeignKeyInfo {
  public let destinationTable: Swift.String
  public let mapping: [(origin: Swift.String, destination: Swift.String)]
  public var originColumns: [Swift.String] {
    get
  }
  public var destinationColumns: [Swift.String] {
    get
  }
}
@_hasMissingDesignatedInitializers final public class FetchedRecordsController<Record> where Record : FetchableRecord {
  convenience public init(_ databaseWriter: any DatabaseWriter, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil, queue: Dispatch.DispatchQueue = .main, isSameRecord: ((Record, Record) -> Swift.Bool)? = nil) throws
  convenience public init<Request>(_ databaseWriter: any DatabaseWriter, request: Request, queue: Dispatch.DispatchQueue = .main, isSameRecord: ((Record, Record) -> Swift.Bool)? = nil) throws where Record == Request.RowDecoder, Request : FetchRequest
  final public func performFetch() throws
  final public let databaseWriter: any DatabaseWriter
  final public let queue: Dispatch.DispatchQueue
  final public func setRequest<Request>(_ request: Request) throws where Record == Request.RowDecoder, Request : FetchRequest
  final public func setRequest(sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws
  final public func trackChanges(willChange: ((FetchedRecordsController<Record>) -> Swift.Void)? = nil, onChange: ((FetchedRecordsController<Record>, Record, FetchedRecordChange) -> Swift.Void)? = nil, didChange: ((FetchedRecordsController<Record>) -> Swift.Void)? = nil)
  final public func trackChanges<T>(fetchAlongside: @escaping (Database) throws -> T, willChange: ((FetchedRecordsController<Record>, _ fetchedAlongside: T) -> Swift.Void)? = nil, onChange: ((FetchedRecordsController<Record>, Record, FetchedRecordChange) -> Swift.Void)? = nil, didChange: ((FetchedRecordsController<Record>, _ fetchedAlongside: T) -> Swift.Void)? = nil)
  final public func trackErrors(_ errorHandler: @escaping (FetchedRecordsController<Record>, any Swift.Error) -> Swift.Void)
  final public func allowBackgroundChangesTracking(in application: UIKit.UIApplication)
  final public var fetchedRecords: [Record] {
    get
  }
  @objc deinit
}
extension FetchedRecordsController where Record : TableRecord {
  convenience public init(_ databaseWriter: any DatabaseWriter, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil, queue: Dispatch.DispatchQueue = .main) throws
  convenience public init<Request>(_ databaseWriter: any DatabaseWriter, request: Request, queue: Dispatch.DispatchQueue = .main) throws where Record == Request.RowDecoder, Request : FetchRequest
}
extension FetchedRecordsController {
  final public func record(at indexPath: Foundation.IndexPath) -> Record
  final public var sections: [FetchedRecordsSectionInfo<Record>] {
    get
  }
}
extension FetchedRecordsController where Record : EncodableRecord {
  final public func indexPath(for record: Record) -> Foundation.IndexPath?
}
public enum FetchedRecordChange {
  case insertion(indexPath: Foundation.IndexPath)
  case deletion(indexPath: Foundation.IndexPath)
  case move(indexPath: Foundation.IndexPath, newIndexPath: Foundation.IndexPath, changes: [Swift.String : DatabaseValue])
  case update(indexPath: Foundation.IndexPath, changes: [Swift.String : DatabaseValue])
}
extension FetchedRecordChange : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct FetchedRecordsSectionInfo<Record> where Record : FetchableRecord {
  public var numberOfRecords: Swift.Int {
    get
  }
  public var records: [Record] {
    get
  }
}
extension ValueReducers {
  public struct Fetch<Value> : ValueReducer {
    public init(_ fetch: @escaping (Database) throws -> Value)
    public func fetch(_ db: Database) throws -> Value
    public func value(_ fetched: Value) -> Value?
    public typealias Fetched = Value
  }
}
@available(*, deprecated, renamed: "ValueReducers.Fetch")
public typealias RawValueReducer<Value> = ValueReducers.Fetch<Value>
extension ValueObservation {
  public func mapReducer<R>(_ transform: @escaping (Database, Reducer) throws -> R) -> ValueObservation<R>
}
public struct SQLLiteral {
  public var sql: Swift.String {
    get
  }
  public var arguments: StatementArguments {
    get
  }
  public init(sql: Swift.String, arguments: StatementArguments = StatementArguments())
  public init(_ expression: any SQLExpression)
  public func mapSQL(_ transform: @escaping (Swift.String) -> Swift.String) -> SQLLiteral
}
extension SQLLiteral {
  public static func + (lhs: SQLLiteral, rhs: SQLLiteral) -> SQLLiteral
  public static func += (lhs: inout SQLLiteral, rhs: SQLLiteral)
  public mutating func append(literal sqlLiteral: SQLLiteral)
  public mutating func append(sql: Swift.String, arguments: StatementArguments = StatementArguments())
}
extension SQLLiteral {
  public var sqlExpression: any SQLExpression {
    get
  }
}
extension Swift.Sequence where Self.Element == SQLLiteral {
  public func joined(separator: Swift.String = "") -> SQLLiteral
}
extension Swift.Collection where Self.Element == SQLLiteral {
  public func joined(separator: Swift.String = "") -> SQLLiteral
}
extension SQLLiteral : Swift.ExpressibleByStringInterpolation {
  public init(unicodeScalarLiteral: Swift.String)
  public init(extendedGraphemeClusterLiteral: Swift.String)
  public init(stringLiteral: Swift.String)
  public init(stringInterpolation sqlInterpolation: SQLInterpolation)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringInterpolation = SQLInterpolation
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
public struct SQLExpressionLiteral : SQLExpression {
  public var sql: Swift.String {
    get
  }
  public var arguments: StatementArguments {
    get
  }
  @available(*, deprecated, message: "Use SQLiteral.sqlExpression instead")
  public init(sql: Swift.String, arguments: StatementArguments = StatementArguments())
  @available(*, deprecated, message: "Use SQLiteral.sqlExpression instead")
  public init(literal sqlLiteral: SQLLiteral)
  public func expressionSQL(_ context: inout SQLGenerationContext, wrappedInParenthesis: Swift.Bool) -> Swift.String
  public func qualifiedExpression(with alias: TableAlias) -> any SQLExpression
}
public struct SQLInterpolation : Swift.StringInterpolationProtocol {
  public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
  public mutating func appendLiteral(_ sql: Swift.String)
  public mutating func appendInterpolation(sql: Swift.String, arguments: StatementArguments = StatementArguments())
  public mutating func appendInterpolation(literal sqlLiteral: SQLLiteral)
  public typealias StringLiteralType = Swift.String
}
extension Swift.Int {
  public static var timestamp: Swift.Int {
    get
  }
}
public protocol TableRecord {
  static var databaseTableName: Swift.String { get }
  static var databaseSelection: [any SQLSelectable] { get }
}
extension TableRecord {
  public static var databaseTableName: Swift.String {
    get
  }
  public static var databaseSelection: [any SQLSelectable] {
    get
  }
}
extension TableRecord {
  public static func fetchCount(_ db: Database) throws -> Swift.Int
}
extension TableRecord {
  public static func selectionSQL(alias: Swift.String? = nil) -> Swift.String
  public static func numberOfSelectedColumns(_ db: Database) throws -> Swift.Int
}
public struct HasManyThroughAssociation<Origin, Destination> : AssociationToMany where Origin : TableRecord, Destination : TableRecord {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var sqlAssociation: SQLAssociation
  public init(sqlAssociation: SQLAssociation)
}
public struct DatabaseMigrator {
  public var eraseDatabaseOnSchemaChange: Swift.Bool
  public init()
  public mutating func registerMigration(_ identifier: Swift.String, migrate: @escaping (Database) throws -> Swift.Void)
  @available(*, deprecated, renamed: "registerMigration(_:migrate:)")
  public mutating func registerMigrationWithDeferredForeignKeyCheck(_ identifier: Swift.String, migrate: @escaping (Database) throws -> Swift.Void)
  public func migrate(_ writer: any DatabaseWriter) throws
  public func migrate(_ writer: any DatabaseWriter, upTo targetIdentifier: Swift.String) throws
  @available(*, deprecated, message: "Wrap this method: reader.read(migrator.appliedMigrations) }")
  public func appliedMigrations(in reader: any DatabaseReader) throws -> Swift.Set<Swift.String>
  public func appliedMigrations(_ db: Database) throws -> [Swift.String]
  public func completedMigrations(_ db: Database) throws -> [Swift.String]
  @available(*, deprecated, message: "Wrap this method: reader.read(migrator.hasCompletedMigrations) }")
  public func hasCompletedMigrations(in reader: any DatabaseReader) throws -> Swift.Bool
  public func hasCompletedMigrations(_ db: Database) throws -> Swift.Bool
  @available(*, deprecated, message: "Prefer reader.read(migrator.completedMigrations).contains(targetIdentifier)")
  public func hasCompletedMigrations(in reader: any DatabaseReader, through targetIdentifier: Swift.String) throws -> Swift.Bool
  @available(*, deprecated, message: "Prefer reader.read(migrator.completedMigrations).last")
  public func lastCompletedMigration(in reader: any DatabaseReader) throws -> Swift.String?
  public func appliedIdentifiers(_ db: Database) throws -> Swift.Set<Swift.String>
}
public protocol SQLSelectable {
  func resultColumnSQL(_ context: inout SQLGenerationContext) -> Swift.String
  func countedSQL(_ context: inout SQLGenerationContext) -> Swift.String
  func count(distinct: Swift.Bool) -> SQLCount?
  func columnCount(_ db: Database) throws -> Swift.Int
  func qualifiedSelectable(with alias: TableAlias) -> any SQLSelectable
}
public enum SQLCount {
  case all
  case distinct(any SQLExpression)
}
extension DatabaseValueConvertible where Self : Foundation.ReferenceConvertible, Self.ReferenceType : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Self?
}
extension DatabaseValueConvertible where Self : Foundation.ReferenceConvertible, Self : Swift.Decodable, Self.ReferenceType : DatabaseValueConvertible {
  public static func fromDatabaseValue(_ databaseValue: DatabaseValue) -> Self?
}
extension DatabaseValueConvertible where Self : Foundation.ReferenceConvertible, Self : Swift.Encodable, Self.ReferenceType : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
}
public struct HasManyAssociation<Origin, Destination> : AssociationToMany where Origin : TableRecord, Destination : TableRecord {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var sqlAssociation: SQLAssociation
  public init(sqlAssociation: SQLAssociation)
}
extension Swift.String {
  @inlinable public var quotedDatabaseIdentifier: Swift.String {
    get {
        // See https://www.sqlite.org/lang_keywords.html
        return "\"\(self)\""
    }
  }
}
@inlinable public func databaseQuestionMarks(count: Swift.Int) -> Swift.String {
    return repeatElement("?", count: count).joined(separator: ",")
}
public protocol _OptionalProtocol {
  associatedtype _Wrapped
}
extension Swift.Optional : _OptionalProtocol {
  public typealias _Wrapped = Wrapped
}
@inlinable internal func GRDBPrecondition(_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String = "", file: Swift.StaticString = #file, line: Swift.UInt = #line) {
    /// Custom precondition function which aims at solving
    /// https://bugs.swift.org/browse/SR-905 and
    /// https://github.com/groue/GRDB.swift/issues/37
    if !condition() {
        fatalError(message(), file: file, line: line)
    }
}
extension Swift.Sequence {
  @inlinable internal func count(where predicate: (Self.Element) throws -> Swift.Bool) rethrows -> Swift.Int {
        var count = 0
        for e in self where try predicate(e) {
            count += 1
        }
        return count
    }
}
public protocol FetchableRecord {
  init(row: Row)
  static var databaseDecodingUserInfo: [Swift.CodingUserInfoKey : Any] { get }
  static func databaseJSONDecoder(for column: Swift.String) -> Foundation.JSONDecoder
  static var databaseDateDecodingStrategy: DatabaseDateDecodingStrategy { get }
}
extension FetchableRecord {
  public static var databaseDecodingUserInfo: [Swift.CodingUserInfoKey : Any] {
    get
  }
  public static func databaseJSONDecoder(for column: Swift.String) -> Foundation.JSONDecoder
  public static var databaseDateDecodingStrategy: DatabaseDateDecodingStrategy {
    get
  }
}
extension FetchableRecord {
  public static func fetchCursor(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> RecordCursor<Self>
  public static func fetchAll(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> [Self]
  public static func fetchOne(_ statement: SelectStatement, arguments: StatementArguments? = nil, adapter: (any RowAdapter)? = nil) throws -> Self?
}
extension FetchableRecord {
  public static func fetchCursor(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> RecordCursor<Self>
  public static func fetchAll(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> [Self]
  public static func fetchOne(_ db: Database, sql: Swift.String, arguments: StatementArguments = StatementArguments(), adapter: (any RowAdapter)? = nil) throws -> Self?
}
extension FetchableRecord {
  public static func fetchCursor<R>(_ db: Database, _ request: R) throws -> RecordCursor<Self> where R : FetchRequest
  public static func fetchAll<R>(_ db: Database, _ request: R) throws -> [Self] where R : FetchRequest
  public static func fetchOne<R>(_ db: Database, _ request: R) throws -> Self? where R : FetchRequest
}
extension FetchRequest where Self.RowDecoder : FetchableRecord {
  public func fetchCursor(_ db: Database) throws -> RecordCursor<Self.RowDecoder>
  public func fetchAll(_ db: Database) throws -> [Self.RowDecoder]
  public func fetchOne(_ db: Database) throws -> Self.RowDecoder?
}
@_hasMissingDesignatedInitializers final public class RecordCursor<Record> : Cursor where Record : FetchableRecord {
  @usableFromInline
  final internal let _statement: SelectStatement
  @usableFromInline
  final internal let _row: Row
  @usableFromInline
  final internal let _sqliteStatement: SQLiteStatement
  @usableFromInline
  final internal var _done: Swift.Bool
  @objc deinit
  @inlinable final public func next() throws -> Record? {
        if _done {
            // make sure this instance never yields a value again, even if the
            // statement is reset by another cursor.
            return nil
        }
        switch sqlite3_step(_sqliteStatement) {
        case SQLITE_DONE:
            _done = true
            return nil
        case SQLITE_ROW:
            return Record(row: _row)
        case let code:
            try _statement.didFail(withResultCode: code)
        }
    }
  public typealias Element = Record
}
public enum DatabaseDateDecodingStrategy {
  case deferredToDate
  case timeIntervalSinceReferenceDate
  case timeIntervalSince1970
  case millisecondsSince1970
  @available(macOS 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
  case iso8601
  case formatted(Foundation.DateFormatter)
  case custom((DatabaseValue) -> Foundation.Date?)
}
public struct DatabaseRegionObservation {
  public var extent: Database.TransactionObservationExtent
}
extension DatabaseRegionObservation {
  public init(tracking regions: any DatabaseRegionConvertible...)
  public init(tracking regions: [any DatabaseRegionConvertible])
}
extension DatabaseRegionObservation {
  public func start(in dbWriter: any DatabaseWriter, onChange: @escaping (Database) -> Swift.Void) throws -> any TransactionObserver
}
public struct BelongsToAssociation<Origin, Destination> : AssociationToOne where Origin : TableRecord, Destination : TableRecord {
  public typealias OriginRowDecoder = Origin
  public typealias RowDecoder = Destination
  public var sqlAssociation: SQLAssociation
  public init(sqlAssociation: SQLAssociation)
}
public protocol SQLOrderingTerm {
  var reversed: any SQLOrderingTerm { get }
  func orderingTermSQL(_ context: inout SQLGenerationContext) -> Swift.String
  func qualifiedOrdering(with alias: TableAlias) -> any SQLOrderingTerm
}
@objc public class ATOMAdParameters : ObjectiveC.NSObject, Swift.Encodable {
  @objc public init(creativeID: Swift.String, cohorts: [Swift.String], impressionURLs: [Swift.String], clickURL: [Swift.String])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension FetchRequest {
  public func observationForCount() -> ValueObservation<ValueReducers.RemoveDuplicates<ValueReducers.Fetch<Swift.Int>>>
}
extension TableRecord {
  public static func observationForCount() -> ValueObservation<ValueReducers.RemoveDuplicates<ValueReducers.Fetch<Swift.Int>>>
}
extension ValueObservation where Reducer == () {
  @available(*, deprecated, message: "Use request.observationForCount() instead")
  public static func trackingCount<Request>(_ request: Request) -> ValueObservation<ValueReducers.RemoveDuplicates<ValueReducers.Fetch<Swift.Int>>> where Request : FetchRequest
}
extension Database.ConflictResolution {
  @usableFromInline
  internal var invalidatesLastInsertedRowID: Swift.Bool {
    get
  }
}
public enum PersistenceError : Swift.Error, Swift.CustomStringConvertible {
  case recordNotFound(databaseTableName: Swift.String, key: [Swift.String : DatabaseValue])
}
extension PersistenceError {
  public var description: Swift.String {
    get
  }
}
public struct PersistenceConflictPolicy {
  public let conflictResolutionForInsert: Database.ConflictResolution
  public let conflictResolutionForUpdate: Database.ConflictResolution
  public init(insert: Database.ConflictResolution = .abort, update: Database.ConflictResolution = .abort)
}
public protocol MutablePersistableRecord : EncodableRecord, TableRecord {
  static var persistenceConflictPolicy: PersistenceConflictPolicy { get }
  mutating func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  mutating func insert(_ db: Database) throws
  func update(_ db: Database, columns: Swift.Set<Swift.String>) throws
  mutating func save(_ db: Database) throws
  @discardableResult
  func delete(_ db: Database) throws -> Swift.Bool
  func exists(_ db: Database) throws -> Swift.Bool
}
extension MutablePersistableRecord {
  public static var persistenceConflictPolicy: PersistenceConflictPolicy {
    get
  }
  public mutating func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  public mutating func insert(_ db: Database) throws
  public func update(_ db: Database, columns: Swift.Set<Swift.String>) throws
  public func update<Sequence>(_ db: Database, columns: Sequence) throws where Sequence : Swift.Sequence, Sequence.Element : ColumnExpression
  public func update<Sequence>(_ db: Database, columns: Sequence) throws where Sequence : Swift.Sequence, Sequence.Element == Swift.String
  public func update(_ db: Database) throws
  @discardableResult
  public func updateChanges<Record>(_ db: Database, from record: Record) throws -> Swift.Bool where Record : MutablePersistableRecord
  @discardableResult
  public mutating func updateChanges(_ db: Database, with change: (inout Self) throws -> Swift.Void) throws -> Swift.Bool
  public mutating func save(_ db: Database) throws
  @discardableResult
  public func delete(_ db: Database) throws -> Swift.Bool
  public func exists(_ db: Database) throws -> Swift.Bool
  @usableFromInline
  internal func primaryKey(_ db: Database) throws -> [Swift.String : DatabaseValue]?
  @inlinable public mutating func performInsert(_ db: Database) throws {
        let conflictResolutionForInsert = type(of: self).persistenceConflictPolicy.conflictResolutionForInsert
        let dao = try DAO(db, self)
        try dao.insertStatement(onConflict: conflictResolutionForInsert).execute()
        
        if !conflictResolutionForInsert.invalidatesLastInsertedRowID {
            didInsert(with: db.lastInsertedRowID, for: dao.primaryKey.rowIDColumn)
        }
    }
  @inlinable public func performUpdate(_ db: Database, columns: Swift.Set<Swift.String>) throws {
        let dao = try DAO(db, self)
        guard
            let statement = try dao.updateStatement(
                columns: columns,
                onConflict: type(of: self).persistenceConflictPolicy.conflictResolutionForUpdate)
            else {
                // Nil primary key
                throw dao.makeRecordNotFoundError()
        }
        try statement.execute()
        if db.changesCount == 0 {
            throw dao.makeRecordNotFoundError()
        }
    }
  @inlinable public mutating func performSave(_ db: Database) throws {
        // Call self.insert and self.update so that we support classes that
        // override those methods.
        if let key = try primaryKey(db) {
            do {
                try update(db)
            } catch PersistenceError.recordNotFound(databaseTableName: type(of: self).databaseTableName, key: key) {
                try insert(db)
            }
        } else {
            try insert(db)
        }
    }
  @inlinable public func performDelete(_ db: Database) throws -> Swift.Bool {
        guard let statement = try DAO(db, self).deleteStatement() else {
            // Nil primary key
            return false
        }
        try statement.execute()
        return db.changesCount > 0
    }
  @inlinable public func performExists(_ db: Database) throws -> Swift.Bool {
        guard let statement = try DAO(db, self).existsStatement() else {
            // Nil primary key
            return false
        }
        return try Row.fetchOne(statement) != nil
    }
}
extension MutablePersistableRecord where Self : AnyObject {
  @discardableResult
  public func updateChanges(_ db: Database, with change: (Self) throws -> Swift.Void) throws -> Swift.Bool
}
extension MutablePersistableRecord {
  @discardableResult
  public static func deleteAll(_ db: Database) throws -> Swift.Int
  @discardableResult
  public static func updateAll(_ db: Database, onConflict conflictResolution: Database.ConflictResolution? = nil, _ assignments: [ColumnAssignment]) throws -> Swift.Int
  @discardableResult
  public static func updateAll(_ db: Database, onConflict conflictResolution: Database.ConflictResolution? = nil, _ assignment: ColumnAssignment, _ otherAssignments: ColumnAssignment...) throws -> Swift.Int
}
extension MutablePersistableRecord {
  @discardableResult
  public static func deleteAll<Sequence>(_ db: Database, keys: Sequence) throws -> Swift.Int where Sequence : Swift.Sequence, Sequence.Element : DatabaseValueConvertible
  @discardableResult
  public static func deleteOne<PrimaryKeyType>(_ db: Database, key: PrimaryKeyType?) throws -> Swift.Bool where PrimaryKeyType : DatabaseValueConvertible
}
extension MutablePersistableRecord {
  @discardableResult
  public static func deleteAll(_ db: Database, keys: [[Swift.String : (any DatabaseValueConvertible)?]]) throws -> Swift.Int
  @discardableResult
  public static func deleteOne(_ db: Database, key: [Swift.String : (any DatabaseValueConvertible)?]) throws -> Swift.Bool
}
public protocol PersistableRecord : MutablePersistableRecord {
  func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  func insert(_ db: Database) throws
  func save(_ db: Database) throws
}
extension PersistableRecord {
  public func didInsert(with rowID: Swift.Int64, for column: Swift.String?)
  public func insert(_ db: Database) throws
  public func save(_ db: Database) throws
  @inlinable public func performInsert(_ db: Database) throws {
        let conflictResolutionForInsert = type(of: self).persistenceConflictPolicy.conflictResolutionForInsert
        let dao = try DAO(db, self)
        try dao.insertStatement(onConflict: conflictResolutionForInsert).execute()
        
        if !conflictResolutionForInsert.invalidatesLastInsertedRowID {
            didInsert(with: db.lastInsertedRowID, for: dao.primaryKey.rowIDColumn)
        }
    }
  @inlinable public func performSave(_ db: Database) throws {
        // Call self.insert and self.update so that we support classes that
        // override those methods.
        if let key = try primaryKey(db) {
            do {
                try update(db)
            } catch PersistenceError.recordNotFound(databaseTableName: type(of: self).databaseTableName, key: key) {
                try insert(db)
            }
        } else {
            try insert(db)
        }
    }
}
@usableFromInline
final internal class DAO<Record> where Record : MutablePersistableRecord {
  @usableFromInline
  final internal let primaryKey: PrimaryKeyInfo
  @usableFromInline
  internal init(_ db: Database, _ record: Record) throws
  @usableFromInline
  final internal func insertStatement(onConflict: Database.ConflictResolution) throws -> UpdateStatement
  @usableFromInline
  final internal func updateStatement(columns: Swift.Set<Swift.String>, onConflict: Database.ConflictResolution) throws -> UpdateStatement?
  @usableFromInline
  final internal func deleteStatement() throws -> UpdateStatement?
  @usableFromInline
  final internal func existsStatement() throws -> SelectStatement?
  @usableFromInline
  final internal func makeRecordNotFoundError() -> any Swift.Error
  @objc @usableFromInline
  deinit
}
extension FetchRequest where Self.RowDecoder : FetchableRecord {
  public func observationForAll() -> ValueObservation<ValueReducers.AllRecords<Self.RowDecoder>>
  public func observationForFirst() -> ValueObservation<ValueReducers.OneRecord<Self.RowDecoder>>
}
extension TableRecord where Self : FetchableRecord {
  public static func observationForAll() -> ValueObservation<ValueReducers.AllRecords<Self>>
  public static func observationForFirst() -> ValueObservation<ValueReducers.OneRecord<Self>>
}
extension ValueObservation where Reducer == () {
  @available(*, deprecated, message: "Use request.observationForAll() instead")
  public static func trackingAll<Request>(_ request: Request) -> ValueObservation<FetchableRecordsReducer<Request.RowDecoder>> where Request : FetchRequest, Request.RowDecoder : FetchableRecord
  @available(*, deprecated, message: "Use request.observationForFirst() instead")
  public static func trackingOne<Request>(_ request: Request) -> ValueObservation<FetchableRecordReducer<Request.RowDecoder>> where Request : FetchRequest, Request.RowDecoder : FetchableRecord
}
extension ValueReducers {
  public struct AllRecords<RowDecoder> : ValueReducer where RowDecoder : FetchableRecord {
    public func fetch(_ db: Database) throws -> [Row]
    public mutating func value(_ rows: [Row]) -> [RowDecoder]?
    public typealias Fetched = [Row]
    public typealias Value = [RowDecoder]
  }
  public struct OneRecord<RowDecoder> : ValueReducer where RowDecoder : FetchableRecord {
    public func fetch(_ db: Database) throws -> Row?
    public mutating func value(_ row: Row?) -> RowDecoder??
    public typealias Fetched = Row?
    public typealias Value = RowDecoder?
  }
}
@available(*, deprecated, renamed: "ValueReducers.AllRecords")
public typealias FetchableRecordsReducer<RowDecoder> = ValueReducers.AllRecords<RowDecoder> where RowDecoder : FetchableRecord
@available(*, deprecated, renamed: "ValueReducers.OneRecord")
public typealias FetchableRecordReducer<RowDecoder> = ValueReducers.OneRecord<RowDecoder> where RowDecoder : FetchableRecord
extension Foundation.NSDate : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Self?
}
extension Foundation.Date : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Foundation.Date?
  @usableFromInline
  internal init?(databaseDateComponents: DatabaseDateComponents)
  public init?(julianDay: Swift.Double)
}
extension Foundation.Date : StatementColumnConvertible {
  @inlinable public init(sqliteStatement: SQLiteStatement, index: Swift.Int32) {
        switch sqlite3_column_type(sqliteStatement, index) {
        case SQLITE_INTEGER, SQLITE_FLOAT:
            self.init(timeIntervalSince1970: sqlite3_column_double(sqliteStatement, index))
        case SQLITE_TEXT:
            let databaseDateComponents = DatabaseDateComponents(sqliteStatement: sqliteStatement, index: index)
            guard let date = Date(databaseDateComponents: databaseDateComponents) else {
                fatalConversionError(to: Date.self, sqliteStatement: sqliteStatement, index: index)
            }
            self.init(timeIntervalSinceReferenceDate: date.timeIntervalSinceReferenceDate)
        default:
            fatalConversionError(to: Date.self, sqliteStatement: sqliteStatement, index: index)
        }
    }
}
extension SQLSpecificExpressible {
  public var asc: any SQLOrderingTerm {
    get
  }
  public var desc: any SQLOrderingTerm {
    get
  }
}
extension SQLSpecificExpressible {
  @available(*, deprecated, renamed: "forKey(_:)")
  public func aliased(_ name: Swift.String) -> any SQLSelectable
  public func forKey(_ key: Swift.String) -> any SQLSelectable
  @available(*, deprecated, renamed: "forKey(_:)")
  public func aliased(_ key: any Swift.CodingKey) -> any SQLSelectable
  public func forKey(_ key: any Swift.CodingKey) -> any SQLSelectable
}
extension SQLSpecificExpressible {
  public func collating(_ collation: Database.CollationName) -> SQLCollatedExpression
  public func collating(_ collation: DatabaseCollation) -> SQLCollatedExpression
}
extension FetchableRecord where Self : Swift.Decodable {
  public init(row: Row)
}
extension EncodableRecord where Self : Swift.Encodable {
  public func encode(to container: inout PersistenceContainer)
}
@usableFromInline
internal struct OrderedDictionary<Key, Value> where Key : Swift.Hashable {
  @usableFromInline
  internal var keys: [Key]
  @usableFromInline
  internal var dictionary: [Key : Value]
  @usableFromInline
  internal subscript(key: Key) -> Value? {
    get
    set
  }
  @inlinable internal subscript(key: Key, default defaultValue: Value) -> Value {
    get { return dictionary[key] ?? defaultValue }
    set { self[key] = newValue }
  }
  @discardableResult
  @usableFromInline
  internal mutating func updateValue(_ value: Value, forKey key: Key) -> Value?
  @discardableResult
  @inlinable internal mutating func removeValue(forKey key: Key) -> Value? {
        guard let value = dictionary.removeValue(forKey: key) else {
            return nil
        }
        let index = keys.firstIndex { $0 == key }!
        keys.remove(at: index)
        return value
    }
}
extension OrderedDictionary : Swift.Collection {
  @usableFromInline
  internal typealias Index = Swift.Int
  @usableFromInline
  internal var startIndex: Swift.Int {
    get
  }
  @usableFromInline
  internal var endIndex: Swift.Int {
    get
  }
  @usableFromInline
  internal func index(after i: Swift.Int) -> Swift.Int
  @usableFromInline
  internal subscript(position: Swift.Int) -> (key: Key, value: Value) {
    get
  }
  @usableFromInline
  internal typealias Element = (key: Key, value: Value)
  @usableFromInline
  internal typealias Indices = Swift.DefaultIndices<OrderedDictionary<Key, Value>>
  @usableFromInline
  internal typealias Iterator = Swift.IndexingIterator<OrderedDictionary<Key, Value>>
  @usableFromInline
  internal typealias SubSequence = Swift.Slice<OrderedDictionary<Key, Value>>
}
extension OrderedDictionary : Swift.ExpressibleByDictionaryLiteral {
  @usableFromInline
  internal init(dictionaryLiteral elements: (Key, Value)...)
}
extension OrderedDictionary : Swift.Equatable where Value : Swift.Equatable {
  @usableFromInline
  internal static func == (lhs: OrderedDictionary<Key, Value>, rhs: OrderedDictionary<Key, Value>) -> Swift.Bool
}
extension Foundation.NSURL : DatabaseValueConvertible {
  public var databaseValue: DatabaseValue {
    get
  }
  public static func fromDatabaseValue(_ dbValue: DatabaseValue) -> Self?
}
extension Foundation.URL : DatabaseValueConvertible {
}
public protocol SQLCollection {
  func collectionSQL(_ context: inout SQLGenerationContext) -> Swift.String
  func contains(_ value: any SQLExpressible) -> any SQLExpression
}
extension SQLCollection {
  public func contains(_ value: any SQLExpressible) -> any SQLExpression
}
public protocol DatabaseReader : AnyObject {
  var configuration: Configuration { get }
  func interrupt()
  func read<T>(_ block: (Database) throws -> T) throws -> T
  func asyncRead(_ block: @escaping (Swift.Result<Database, any Swift.Error>) -> Swift.Void)
  func unsafeRead<T>(_ block: (Database) throws -> T) throws -> T
  func unsafeReentrantRead<T>(_ block: (Database) throws -> T) throws -> T
  func add(function: DatabaseFunction)
  func remove(function: DatabaseFunction)
  func add(collation: DatabaseCollation)
  func remove(collation: DatabaseCollation)
  func add<Reducer>(observation: ValueObservation<Reducer>, onError: @escaping (any Swift.Error) -> Swift.Void, onChange: @escaping (Reducer.Value) -> Swift.Void) -> any TransactionObserver where Reducer : ValueReducer
  func remove(transactionObserver: any TransactionObserver)
}
extension DatabaseReader {
  public func backup(to writer: any DatabaseWriter) throws
}
final public class AnyDatabaseReader : DatabaseReader {
  public init(_ base: any DatabaseReader)
  final public var configuration: Configuration {
    get
  }
  final public func interrupt()
  final public func read<T>(_ block: (Database) throws -> T) throws -> T
  final public func asyncRead(_ block: @escaping (Swift.Result<Database, any Swift.Error>) -> Swift.Void)
  final public func unsafeRead<T>(_ block: (Database) throws -> T) throws -> T
  final public func unsafeReentrantRead<T>(_ block: (Database) throws -> T) throws -> T
  final public func add(function: DatabaseFunction)
  final public func remove(function: DatabaseFunction)
  final public func add(collation: DatabaseCollation)
  final public func remove(collation: DatabaseCollation)
  final public func add<Reducer>(observation: ValueObservation<Reducer>, onError: @escaping (any Swift.Error) -> Swift.Void, onChange: @escaping (Reducer.Value) -> Swift.Void) -> any TransactionObserver where Reducer : ValueReducer
  final public func remove(transactionObserver: any TransactionObserver)
  @objc deinit
}
extension SQLInterpolation {
  public mutating func appendInterpolation<T>(_ table: T.Type) where T : TableRecord
  public mutating func appendInterpolation<T>(tableOf record: T) where T : TableRecord
  public mutating func appendInterpolation(_ selection: any SQLSelectable)
  public mutating func appendInterpolation(_ expressible: any SQLExpressible & SQLOrderingTerm & SQLSelectable)
  public mutating func appendInterpolation(_ codingKey: any SQLExpressible & SQLOrderingTerm & SQLSelectable & Swift.CodingKey)
  public mutating func appendInterpolation(_ expressible: (any SQLExpressible)?)
  public mutating func appendInterpolation(_ codingKey: any Swift.CodingKey)
  public mutating func appendInterpolation<T>(_ expressible: T) where T : SQLExpressible, T : Swift.Sequence, T.Element : SQLExpressible
  public mutating func appendInterpolation<S>(_ sequence: S) where S : Swift.Sequence, S.Element : SQLExpressible
  public mutating func appendInterpolation<S>(_ sequence: S) where S : Swift.Sequence, S.Element == any SQLExpression
  public mutating func appendInterpolation(_ ordering: any SQLOrderingTerm)
  public mutating func appendInterpolation<T>(_ request: SQLRequest<T>)
}
public struct FTS3 : VirtualTableModule {
  public enum Diacritics {
    case keep
    case removeLegacy
    public static func == (a: FTS3.Diacritics, b: FTS3.Diacritics) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init()
  public let moduleName: Swift.String
  public func makeTableDefinition() -> FTS3TableDefinition
  public func moduleArguments(for definition: FTS3TableDefinition, in db: Database) -> [Swift.String]
  public func database(_ db: Database, didCreate tableName: Swift.String, using definition: FTS3TableDefinition)
  public typealias TableDefinition = FTS3TableDefinition
}
@_hasMissingDesignatedInitializers final public class FTS3TableDefinition {
  final public var tokenizer: FTS3TokenizerDescriptor?
  final public func column(_ name: Swift.String)
  @objc deinit
}
extension Database.CheckpointMode : Swift.Equatable {}
extension Database.CheckpointMode : Swift.Hashable {}
extension Database.CheckpointMode : Swift.RawRepresentable {}
extension Database.ConflictResolution : Swift.Equatable {}
extension Database.ConflictResolution : Swift.Hashable {}
extension Database.ConflictResolution : Swift.RawRepresentable {}
extension Database.ForeignKeyAction : Swift.Equatable {}
extension Database.ForeignKeyAction : Swift.Hashable {}
extension Database.ForeignKeyAction : Swift.RawRepresentable {}
extension Database.TransactionCompletion : Swift.Equatable {}
extension Database.TransactionCompletion : Swift.Hashable {}
extension Database.TransactionKind : Swift.Equatable {}
extension Database.TransactionKind : Swift.Hashable {}
extension Database.TransactionKind : Swift.RawRepresentable {}
extension ATOMCellularConnectionType : Swift.Equatable {}
extension ATOMCellularConnectionType : Swift.Hashable {}
extension DatabaseUUIDEncodingStrategy : Swift.Equatable {}
extension DatabaseUUIDEncodingStrategy : Swift.Hashable {}
extension ATOMGesturesList : Swift.Equatable {}
extension ATOMGesturesList : Swift.Hashable {}
extension ATOMGesturesList : Swift.RawRepresentable {}
extension Database.TransactionObservationExtent : Swift.Equatable {}
extension Database.TransactionObservationExtent : Swift.Hashable {}
extension DatabaseEvent.Kind : Swift.Equatable {}
extension DatabaseEvent.Kind : Swift.Hashable {}
extension DatabaseEvent.Kind : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension ATOMReachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension ATOMReachability.NetworkStatus : Swift.Hashable {}
extension ATOMReachability.Connection : Swift.Equatable {}
extension ATOMReachability.Connection : Swift.Hashable {}
extension DatabaseDateComponents.Format : Swift.Equatable {}
extension DatabaseDateComponents.Format : Swift.Hashable {}
extension DatabaseDateComponents.Format : Swift.RawRepresentable {}
extension FTS3.Diacritics : Swift.Equatable {}
extension FTS3.Diacritics : Swift.Hashable {}
